{"title":"java命令行执行程序","slug":"java程序启动","date":"2021-08-04T16:00:00.000Z","updated":"2021-08-05T09:06:31.568Z","comments":true,"path":"api/articles/java程序启动.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"java命令行执行程序\"><a href=\"#java命令行执行程序\" class=\"headerlink\" title=\"java命令行执行程序\"></a>java命令行执行程序</h1><h2 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h2><p>—hello</p>\n<p>​    —src</p>\n<p>​        —com</p>\n<p>​            —demo</p>\n<p>​                —Hello.java</p>\n<p>​    —target</p>\n<p>​        —com</p>\n<p>​            —demo</p>\n<p>​                —Hello.class</p>\n<p>​    —MANIFEST.MF</p>\n<p>​    —libs</p>\n<p>​        —gson-2.8.5.jar</p>\n<p>java文件的结构：</p>\n<ul>\n<li><p>package：必须指定包路径</p>\n</li>\n<li><p>import：某个类中引用了其他类要导包</p>\n</li>\n<li><p>class</p>\n</li>\n</ul>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><ul>\n<li><p>javac</p>\n<p><code>javac -cp &lt;第三方jar包|其他类中引用的类名.java&gt; &lt;类名.java&gt; -d &lt;指定编译后class类的存放路径&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac src/com/demo/Hello.java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d target 参数，指定 class 文件生成在 target 目录</span></span><br><span class=\"line\">javac src/com/demo/Hello.java -d target</span><br></pre></td></tr></table></figure></li>\n<li><p>java</p>\n<p>jar包运行</p>\n<ul>\n<li>指定manifest.mf，<code>java -jar &lt;可执行jar包&gt;</code></li>\n<li><del>未指定manifest.mf，<code>java -jar &lt;可执行jar包&gt; &lt;第三方jar包&gt; &lt;入口类&gt;</code></del></li>\n</ul>\n<p>不打包直接运行：<code>java -cp &lt;第三方jar包&gt; &lt;入口类&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -cp src 这个参数是把 src 目录添加到 classpath 目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用 : 分隔的目录, JAR 档案和 ZIP 档案列表</span></span><br><span class=\"line\">java -cp src com.demo.Hello</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 也可以直接执行，如果Hello文件中存在package包名，则在包名所在的目录下，通过包名访问</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在src目录下执行以下命令</span></span><br><span class=\"line\">java com.demo.Hello</span><br></pre></td></tr></table></figure></li>\n<li><p>javap</p>\n<p>javap反编译命令，主要用于帮助开发者深入了解 Java 编译器的机制</p>\n<p>-c：对代码进行反编译</p>\n<p>-public | protected | package | private：用于指定显示哪种级别的类成员</p>\n<p>-verbose：指定显示更进一步的详细信息</p>\n</li>\n<li><p>jar</p>\n<p>需指定manifest.mf文件，该文件包含：Main-Class（入口类）和Class-Path（将依赖包添加到类路径下）</p>\n<p><code>jar -cvfm &lt;自定义打包名&gt; MANIFEST.MF &lt;需打包的文件&gt;</code></p>\n<p>-c：创建一个jar包</p>\n<p>-v：生成详细的报造，并输出至标准设备</p>\n<p>-f：指定jar包的文件名</p>\n<p>-m：指定manifest.mf文件</p>\n<p>-C：转到相应的目录下执行jar命令，相当于cd到那个目录并不带-C执行jar命令</p>\n<p>-x：解压jar包</p>\n</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p><a href=\"https://www.cnblogs.com/eoalfj/p/12332808.html\">Java 命令行 编译、执行、打包</a></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>打包应只包含.class文件，创建target目录专门存放class文件。</p>\n<p>编译：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d target 参数，指定 class 文件生成在 target 目录</span></span><br><span class=\"line\">javac src/com/demo/Hello.java -d target</span><br></pre></td></tr></table></figure>\n\n<p>打包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -C target . 参数，指定把 target 目录下的所有文件打包</span></span><br><span class=\"line\">jar -cvf my.jar -C target .</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -cp my.jar 把 jar 包添加到 classpath 目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> com.demo.Hello 说明哪个类是入口</span></span><br><span class=\"line\">java -cp my.jar com.demo.Hello</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"可执行的jar包\"><a href=\"#可执行的jar包\" class=\"headerlink\" title=\"可执行的jar包\"></a>可执行的jar包</h3><p>项目路径下创建MANIFEST.MF文件，文件内说明程序入口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main-Class: com.demo.Hello</span><br></pre></td></tr></table></figure>\n\n<p>打包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加了 m 参数，指定 MANIFEST.MF，这个文件的内容会被添加到 jar 包的清单，用于说明 my.jar 的入口</span></span><br><span class=\"line\">jar -cvfm my.jar MANIFEST.MF -C target .</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar my.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"依赖第三方jar包的java代码编译执行\"><a href=\"#依赖第三方jar包的java代码编译执行\" class=\"headerlink\" title=\"依赖第三方jar包的java代码编译执行\"></a>依赖第三方jar包的java代码编译执行</h3><p>在项目目录下添加libs目录，并把jar包放入</p>\n<p>编译：</p>\n<p>编译的时候要将依赖包添加到classpath下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -cp libs/gson-2.8.5.jar 添加依赖包</span></span><br><span class=\"line\">javac -cp libs/gson-2.8.5.jar src/com/demo/HelloGson.java -d target</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<p>将外部依赖包添加到classpath下才能运行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行时也需把 libs/gson-2.8.5.jar 添加到 classpath 路径中</span></span><br><span class=\"line\">java -cp target:libs/gson-2.8.5.jar com.demo.HelloGson</span><br></pre></td></tr></table></figure>\n\n<p>打包：</p>\n<p><a href=\"https://blog.csdn.net/whitenigt/article/details/80209472\">命令行打包jar</a></p>\n<p>打包成可执行jar包的时候，在MANIFEST.MF文件中配置classpath：</p>\n<p>注意打包命令加上-C后，manf文件中的Class-Path是相对于-C参数指定的目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main-Class: com.demo.Hello</span><br><span class=\"line\">Class-Path: libs/gson-2.8.5.jar</span><br></pre></td></tr></table></figure>\n\n<p>注意每个MANIFEST属性冒号与内容之间都有一个空格，并且写完后最后还要留有一行空行，不然运行时还是出现找不到主清单属性的错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -cvfm my.jar MANIFEST.MF -C target .</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>胖包和瘦包问题</p>\n","categories":[],"tags":[]}