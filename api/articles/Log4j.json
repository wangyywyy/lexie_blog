{"title":"Log4j","slug":"Log4j","date":"2021-07-30T07:39:33.275Z","updated":"2021-08-05T02:41:06.427Z","comments":true,"path":"api/articles/Log4j.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"Log4j\"><a href=\"#Log4j\" class=\"headerlink\" title=\"Log4j\"></a>Log4j</h1><p><strong>使用log4j 需要加载的jar包有</strong>：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log4j</span>.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Log4j三大组件\"><a href=\"#Log4j三大组件\" class=\"headerlink\" title=\"Log4j三大组件\"></a>Log4j三大组件</h2><p><a href=\"http://liuzhijun.iteye.com/blog/1746571\">快速了解Log4J</a></p>\n<p>一个logger可对应多个appender，一个appender只能对应一个layout。</p>\n<ul>\n<li><p><strong>Logger：日志记录器，负责收集处理日志记录   （如何处理日志）</strong></p>\n<ul>\n<li><p><strong>Root</strong> Logger：所有日志都会直接或者间接地继承自root。</p>\n<p>通过<code>Logger.getRootLogger()</code>方法获取根日志。</p>\n</li>\n<li><p>日志的创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger.getLogger(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// log4j</span></span><br><span class=\"line\">LogManager.getLogger(<span class=\"string\">&quot;name&quot;</span>);<span class=\"comment\">// log4j2</span></span><br></pre></td></tr></table></figure>\n\n<p>log的name就是XX类的全限定类名。Logger的命名有继承机制：name为com.yy的logger会继承name为com的logger。</p>\n</li>\n<li><p>Level</p>\n<p>日志级别（从高到低）：OFF（关闭）FATAL（致命的） ERROR（错误）WARN（警告） INFO（信息）DEBUG （调试） ALL（所有）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.info(message);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果logger的Level设置为INFO，那么系统只输出INFO以及以上（WARN、ERROR、FATAL）信息。</p>\n</li>\n<li><p>如果当前logger没有设定Level，那么它会使用它继承的Logger的Level作为它自己的Level来处理。不断往上上级寻找不为空的Level，直到root为止（root的Level不能设为空）<strong>。默认root的Level是INFO，其他logger的Level默认都是null，需要手动指定。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Appender：日志输出目的地，负责日志的输出（输出到什么 地方）</p>\n<p>通过<code>logger.addAppender(appender)</code>配置多个appender。</p>\n<p>每个有效的日志请求结果都将输出到logger本身以及父logger的appender上。可以通过<code>logger.setAdditivity(false);</code>让日志仅在logger本身输出。</p>\n<p>常用appender：</p>\n<ul>\n<li>org.apache.log4j.<strong>ConsoleAppender</strong>（控制台</li>\n<li>org.apache.log4j.FileAppender（文件）</li>\n<li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li>\n<li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li>\n<li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li>\n</ul>\n</li>\n<li><p>Layout：日志格式化，负责对输出的日志格式化（以什么形式展现）</p>\n<p>常见layout：</p>\n<ul>\n<li><p>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</p>\n</li>\n<li><p>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</p>\n</li>\n<li><p>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</p>\n</li>\n<li><p>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger com = Logger.getLogger(<span class=\"string\">&quot;com&quot;</span>);  </span><br><span class=\"line\">Appender appender = <span class=\"keyword\">new</span> FileAppender(<span class=\"keyword\">new</span> SimpleLayout(),<span class=\"string\">&quot;hello.log&quot;</span>);  </span><br><span class=\"line\">com.addAppender(appender);  </span><br><span class=\"line\">  </span><br><span class=\"line\">Logger iteye = Logger.getLogger(<span class=\"string\">&quot;com.iteye&quot;</span>);  </span><br><span class=\"line\">iteye.addAppender(<span class=\"keyword\">new</span> ConsoleAppender(<span class=\"keyword\">new</span> SimpleLayout(), <span class=\"string\">&quot;System.out&quot;</span>));  <span class=\"comment\">//target:sys.out(default) 或 sys.err  </span></span><br><span class=\"line\">iteye.info(<span class=\"string\">&quot;hello world&quot;</span>);  </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Log4j配置\"><a href=\"#Log4j配置\" class=\"headerlink\" title=\"Log4j配置\"></a>Log4j配置</h2><ol>\n<li><p>配置根Logger</p>\n<p>一般情况下，只需要配置根记录器rootLogger即可，<strong>所有的logger都会沿用rootLogger的配置。</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> =  <span class=\"string\">[ level ]  , appenderName1 , appenderName2 , … </span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置日志信息输出目的地（Appender）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName</span> = <span class=\"string\">fully.qualified.name.of.appender.class  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.option1</span> = <span class=\"string\">value1  </span></span><br><span class=\"line\"><span class=\"comment\"># …  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.optionN</span> = <span class=\"string\">valueN </span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置日志信息的格式（Layout）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout</span> = <span class=\"string\">fully.qualified.name.of.layout.class  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout.option1</span> = <span class=\"string\">value1  </span></span><br><span class=\"line\"><span class=\"comment\"># …  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout.optionN</span> = <span class=\"string\">valueN  </span></span><br></pre></td></tr></table></figure>\n\n<p>其中<strong>ConversionPattern</strong>参数的格式含义</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">格式名</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%c</td>\n<td align=\"left\">输出日志信息所属的类的全名</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"left\">输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"left\">输出日志信息所属的类的类名</td>\n</tr>\n<tr>\n<td align=\"center\">%l</td>\n<td align=\"left\">输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行</td>\n</tr>\n<tr>\n<td align=\"center\">%m</td>\n<td align=\"left\">输出代码中指定的信息，如log(message)中的message</td>\n</tr>\n<tr>\n<td align=\"center\">%n</td>\n<td align=\"left\">输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"left\">输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推</td>\n</tr>\n<tr>\n<td align=\"center\">%r</td>\n<td align=\"left\">输出自应用启动到输出该日志信息所耗费的毫秒数</td>\n</tr>\n<tr>\n<td align=\"center\">%t</td>\n<td align=\"left\">输出产生该日志事件的线程名</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置根Logger </span></span><br><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> = <span class=\"string\">DEBUG,stdout,file</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### 输出到控制台 ###  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout</span> = <span class=\"string\">org.apache.log4j.ConsoleAppender  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.Target</span> = <span class=\"string\">System.out   #默认就是System.out，另外一个值是System.error  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout</span> = <span class=\"string\">org.apache.log4j.PatternLayout  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout.ConversionPattern</span> =  <span class=\"string\">%d&#123;ABSOLUTE&#125; %5p %c&#123; 1 &#125;:%L - %m%n  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### 输出到文件 ###  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file</span> = <span class=\"string\">org.apache.log4j.DailyRollingFileAppender  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.File</span> = <span class=\"string\">logs/log.log  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.Append</span> = <span class=\"string\">true   #默认就是true，系统启动时追加至文件中，否则会覆盖原有内容  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.Threshold</span> = <span class=\"string\">INFO ## 输出IFNO级别以上的日志，这里的意思是rootLogger设置为DEBUG时，只输出INFO以上（INFO、WARN、ERROR、FATAL）的信息到文件中去，而DEBUG信息就不会输出了  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置日志信息的格式（Layout）</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout</span> = <span class=\"string\">org.apache.log4j.PatternLayout  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout.ConversionPattern</span> = <span class=\"string\">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n  </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Log4j2\"><a href=\"#Log4j2\" class=\"headerlink\" title=\"Log4j2\"></a>Log4j2</h1><p><a href=\"https://blog.csdn.net/loophome/article/details/94033039\">Java Log4j和Log4j2的区别</a></p>\n<p><strong>使用log4j2 需要加载的jar包有</strong>：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log4j</span>-api-[version].jar</span><br><span class=\"line\"><span class=\"attribute\">log4j</span>-core-[version].jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Log4j2配置\"><a href=\"#Log4j2配置\" class=\"headerlink\" title=\"Log4j2配置\"></a>Log4j2配置</h2><p>没有log4j2的配置文件，将使用缺省配置：控制台log的级别为error，log自身的日志级别为trace。（log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的配置文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台。）</p>\n<p><a href=\"https://blog.csdn.net/vbirdbest/article/details/71751835#t8\">五：log4j2配置文件详解</a></p>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><p><a href=\"http://logging.apache.org/log4j/2.x/manual/plugins.html\">Plugin</a></p>\n<p><a href=\"https://github.com/OuZhencong/log4j2/wiki/Log4j-2%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6\">Log4j 2的插件机制</a></p>\n<p>Log4j 2的扩展机制：通过在初始化时调用PluginManager，然后PluginManager则会去扫描在配置文件中声明的那些packages，如果找到了相应的被注解为plugin的类，则会去加载这些plugin。</p>\n<p>配置方式如下：</p>\n<p>在Log4j 2初始化时，PluginManager去扫描 <strong>org.apache.logging.log4j.test</strong> 这个包，去加载那些注解为plugin的类。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">status</span>=<span class=\"string\">&quot;debug&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;XMLConfigTest&quot;</span> <span class=\"attr\">packages</span>=<span class=\"string\">&quot;org.apache.logging.log4j.test&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h3><p>核心插件是那些直接由配置文件中的元素表示的插件，例如：Appender、Logger以及Filter。</p>\n<ol>\n<li><p>首先，每一个Core plugin都必须在其类声明加上@Plugin注解，并且声明清楚其中的各个属性。</p>\n<p>用户在其配置中通过@Plugin上配置的name 属性来使用Appender。如果 Appender 的属性值是使用toString 方法传递的，Appender 应将 printObject 指定为“true”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Plugin</span> (name = <span class=\"string\">&quot;Async&quot;</span> , category = <span class=\"string\">&quot;Core&quot;</span>, elementType = <span class=\"string\">&quot;appender&quot;</span> , printObject = <span class=\"keyword\">true</span> )</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAppender</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>每一个Core plugin的类，都必须声明一个static方法，并且被加上@PluginFactory注解。这个方法可以用来接收log4j.xml的传参数，可以自行添加接收，和log4j.xml 中传参数对应上就行（用于Log4j初始化的时候生成一个具体的plugin实例。）</p>\n<p>每个元素的注解都必须包含配置中存在的名称，以便将配置项与其各自的参数相匹配。为了允许配置将正确的参数传递给方法，方法的每个参数都必须注释为以下属性类型之一：</p>\n<ul>\n<li><strong>PluginAttribute</strong>：该参数必须可以使用<a href=\"http://logging.apache.org/log4j/2.x/manual/plugins.html#TypeConverters\">TypeConverter</a>从 String 转换。(这个字段在配置文件中可以通过字符串来创建的简单类型参数。)</li>\n<li><strong>PluginElement</strong>：参数可能代表一个复杂的对象，它本身具有可以配置的参数。这也支持注入元素数组。</li>\n<li>PluginConfiguration：当前这个配置的配置对象，作为一个参数传入这个plugin实例中。</li>\n<li>PluginNode</li>\n<li>PluginValue</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PluginFactory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailAppender <span class=\"title\">createAppender</span><span class=\"params\">(<span class=\"meta\">@PluginAttribute(&quot;name&quot;)</span>String name,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"meta\">@PluginElement(&quot;Filters&quot;)</span>Filter filter,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"meta\">@PluginElement(&quot;Layout&quot;)</span>Layout layout)</span></span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>也可以使用<code>@PluginBuilderFactory</code>注解，用于构造一个新的 Builder&lt;T&gt; 类，其字段用于注入属性和子节点。如果注解（<code>@PluginAttribute</code>、<code>@PluginElement</code>等）中未指定名称，则默认使用字段名称。</p>\n</li>\n</ol>\n<h4 id=\"Appenders\"><a href=\"#Appenders\" class=\"headerlink\" title=\"Appenders\"></a>Appenders</h4><p><a href=\"http://logging.apache.org/log4j/2.x/manual/extending.html#Plugin_Builders\">Appenders</a></p>\n<p>Appenders 被传递一个事件，调用一个Layout来格式化事件，然后以任何需要的方式“发布”事件。</p>\n","categories":[],"tags":[]}