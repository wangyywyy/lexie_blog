{"title":"IO流","slug":"IO流","date":"2021-08-04T16:00:00.000Z","updated":"2021-08-05T09:07:37.876Z","comments":true,"path":"api/articles/IO流.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><a href=\"https://www.cnblogs.com/sebastian-tyd/p/7895182.html\">Java 读取 .properties 配置文件的三种方式</a></p>\n<p><a href=\"https://www.cnblogs.com/yichunguo/p/11775270.html\">史上最骚最全最详细的IO流教程，没有之一！</a></p>\n<ol>\n<li><p>File</p>\n<ul>\n<li><p>一个File对象代表硬盘中实际存在的一个<strong>文件</strong>或者<strong>目录</strong>。</p>\n</li>\n<li><p>File类构造方法不会给你检验这个文件或文件夹是否真实存在，因此无论该路径下是否存在文件或者目录，都不影响File对象的创建。</p>\n</li>\n</ul>\n</li>\n<li><p>字节流</p>\n<ul>\n<li><p>FileOutputStream</p>\n<ul>\n<li>写出字节数据<code>int write(int b)</code></li>\n<li>写出字节数组<code>int write(byte[] b)</code></li>\n<li>写出指定长度字节数组<code>write(byte[] b, int off, int len)</code></li>\n<li><strong>数据追加续写</strong><code>public FileOutputStream(File file, boolean append)</code>，true表示追加数据，false表示不追加也就是清空原有数据。</li>\n</ul>\n</li>\n<li><p>FileInputStream</p>\n<ul>\n<li><p>读取字节：<code>int read()</code></p>\n</li>\n<li><p>字节数组读取（<strong>建议</strong>）：<code>int read(byte[] b)</code>返回值为读取到的有效字节数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FISRead</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 使用文件名称创建流对象.</span></span><br><span class=\"line\">       \tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;read.txt&quot;</span>); <span class=\"comment\">// 文件中为abcde</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 定义变量，作为有效个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len ；</span><br><span class=\"line\">        <span class=\"comment\">// 定义字节数组，作为装字节数据的容器 </span></span><br><span class=\"line\">        <span class=\"comment\">// 建议使用数组来读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 循环读取</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (( len= fis.read(b))!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">           \t<span class=\"comment\">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果只是输出new String(b),那么最后的输出结果为</span></span><br><span class=\"line\">          <span class=\"comment\">// ab</span></span><br><span class=\"line\">          <span class=\"comment\">// cd</span></span><br><span class=\"line\">          <span class=\"comment\">// ed</span></span><br><span class=\"line\">          <span class=\"comment\">// 因为最后一次读取只读到了一个数据e，b[1]的数据没有被覆盖。</span></span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(b，<span class=\"number\">0</span>，len));<span class=\"comment\">//  len 每次读取的有效字节个数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">ab</span><br><span class=\"line\">cd</span><br><span class=\"line\">e</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>字符流</p>\n<p>构造时使用系统默认的字符编码和默认字节缓冲区。</p>\n<ul>\n<li><p>FileReader读取字符信息到内存中，读取字符文件的便利类。</p>\n</li>\n<li><p>FileWriter将指定的字符信息写出到目的地，写出字符到文件的便利类。</p>\n<ul>\n<li>写入字符串<code>void write(String str)</code></li>\n<li>写入字符串的某一部分,off字符串的开始索引,len写的字符个数。<code>void write(String str, int off, int len)</code></li>\n</ul>\n<p>因为内置缓冲区的原因，如果不关闭输出流，字符无法写出到文件中。</p>\n<ul>\n<li>flush() ：刷新缓冲区，流对象可以继续使用。</li>\n<li>close() : 先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FWWrite</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用文件名称创建流对象</span></span><br><span class=\"line\">        FileWriter fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">&quot;fw.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 写出数据，通过flush</span></span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;刷&#x27;</span>); <span class=\"comment\">// 写出第1个字符</span></span><br><span class=\"line\">        fw.flush();</span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;新&#x27;</span>); <span class=\"comment\">// 继续写出第2个字符，写出成功</span></span><br><span class=\"line\">        fw.flush();</span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// 写出数据，通过close</span></span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;关&#x27;</span>); <span class=\"comment\">// 写出第1个字符</span></span><br><span class=\"line\">        fw.close();</span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;闭&#x27;</span>); <span class=\"comment\">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class=\"line\">        fw.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>缓冲流</p>\n<p>使用了底层流对象从具体设备上获取数据，并将数据存储到缓冲区的数组内。<br>通过缓冲区的read()方法从缓冲区获取具体的字符数据，这样就提高了效率。<br>如果用read方法读取字符数据，并存储到另一个容器中，直到读取到了换行符时，将另一个容器临时存储的数据转成字符串返回，就形成了readLine()功能。</p>\n<ul>\n<li><p>字节缓冲流</p>\n<ul>\n<li><code>public BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>InputStream</strong>。</li>\n<li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>OutputStream</strong>。</li>\n</ul>\n</li>\n<li><p>字符缓冲流</p>\n<ul>\n<li><code>public BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>Reader</strong>。</li>\n<li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>Writer</strong>。</li>\n</ul>\n<p>字符缓冲流特有的方法：</p>\n<ul>\n<li>BufferedReader：<code>public String readLine()</code>: <strong>读一行数据</strong>。 读取到最后返回null。</li>\n<li>BufferedWriter：<code>public void newLine()</code>: <strong>换行</strong>,由系统属性定义符号。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>转换流</p>\n<ul>\n<li><p>InputStreamReader：读取字节，并使用指定的字符集将其解码为字符。</p>\n<p><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</p>\n</li>\n<li><p>OutputStreamWriter：使用指定的字符集将字符编码为字节。</p>\n<p><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</p>\n</li>\n</ul>\n</li>\n</ol>\n","categories":[],"tags":[]}