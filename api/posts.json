{"total":9,"pageSize":10,"pageCount":1,"data":[{"title":"IO流","slug":"IO流","date":"2021-08-04T16:00:00.000Z","updated":"2021-08-05T09:07:37.876Z","comments":true,"path":"api/articles/IO流.json","excerpt":"","keywords":null,"cover":null,"content":"<p><a href=\"https://www.cnblogs.com/sebastian-tyd/p/7895182.html\">Java 读取 .properties 配置文件的三种方式</a></p>\n<p><a href=\"https://www.cnblogs.com/yichunguo/p/11775270.html\">史上最骚最全最详细的IO流教程，没有之一！</a></p>\n<ol>\n<li><p>File</p>\n<ul>\n<li><p>一个File对象代表硬盘中实际存在的一个<strong>文件</strong>或者<strong>目录</strong>。</p>\n</li>\n<li><p>File类构造方法不会给你检验这个文件或文件夹是否真实存在，因此无论该路径下是否存在文件或者目录，都不影响File对象的创建。</p>\n</li>\n</ul>\n</li>\n<li><p>字节流</p>\n<ul>\n<li><p>FileOutputStream</p>\n<ul>\n<li>写出字节数据<code>int write(int b)</code></li>\n<li>写出字节数组<code>int write(byte[] b)</code></li>\n<li>写出指定长度字节数组<code>write(byte[] b, int off, int len)</code></li>\n<li><strong>数据追加续写</strong><code>public FileOutputStream(File file, boolean append)</code>，true表示追加数据，false表示不追加也就是清空原有数据。</li>\n</ul>\n</li>\n<li><p>FileInputStream</p>\n<ul>\n<li><p>读取字节：<code>int read()</code></p>\n</li>\n<li><p>字节数组读取（<strong>建议</strong>）：<code>int read(byte[] b)</code>返回值为读取到的有效字节数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FISRead</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 使用文件名称创建流对象.</span></span><br><span class=\"line\">       \tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;read.txt&quot;</span>); <span class=\"comment\">// 文件中为abcde</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 定义变量，作为有效个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len ；</span><br><span class=\"line\">        <span class=\"comment\">// 定义字节数组，作为装字节数据的容器 </span></span><br><span class=\"line\">        <span class=\"comment\">// 建议使用数组来读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 循环读取</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (( len= fis.read(b))!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">           \t<span class=\"comment\">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果只是输出new String(b),那么最后的输出结果为</span></span><br><span class=\"line\">          <span class=\"comment\">// ab</span></span><br><span class=\"line\">          <span class=\"comment\">// cd</span></span><br><span class=\"line\">          <span class=\"comment\">// ed</span></span><br><span class=\"line\">          <span class=\"comment\">// 因为最后一次读取只读到了一个数据e，b[1]的数据没有被覆盖。</span></span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(b，<span class=\"number\">0</span>，len));<span class=\"comment\">//  len 每次读取的有效字节个数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">ab</span><br><span class=\"line\">cd</span><br><span class=\"line\">e</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>字符流</p>\n<p>构造时使用系统默认的字符编码和默认字节缓冲区。</p>\n<ul>\n<li><p>FileReader读取字符信息到内存中，读取字符文件的便利类。</p>\n</li>\n<li><p>FileWriter将指定的字符信息写出到目的地，写出字符到文件的便利类。</p>\n<ul>\n<li>写入字符串<code>void write(String str)</code></li>\n<li>写入字符串的某一部分,off字符串的开始索引,len写的字符个数。<code>void write(String str, int off, int len)</code></li>\n</ul>\n<p>因为内置缓冲区的原因，如果不关闭输出流，字符无法写出到文件中。</p>\n<ul>\n<li>flush() ：刷新缓冲区，流对象可以继续使用。</li>\n<li>close() : 先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FWWrite</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用文件名称创建流对象</span></span><br><span class=\"line\">        FileWriter fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">&quot;fw.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 写出数据，通过flush</span></span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;刷&#x27;</span>); <span class=\"comment\">// 写出第1个字符</span></span><br><span class=\"line\">        fw.flush();</span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;新&#x27;</span>); <span class=\"comment\">// 继续写出第2个字符，写出成功</span></span><br><span class=\"line\">        fw.flush();</span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// 写出数据，通过close</span></span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;关&#x27;</span>); <span class=\"comment\">// 写出第1个字符</span></span><br><span class=\"line\">        fw.close();</span><br><span class=\"line\">        fw.write(<span class=\"string\">&#x27;闭&#x27;</span>); <span class=\"comment\">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class=\"line\">        fw.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>缓冲流</p>\n<p>使用了底层流对象从具体设备上获取数据，并将数据存储到缓冲区的数组内。<br>通过缓冲区的read()方法从缓冲区获取具体的字符数据，这样就提高了效率。<br>如果用read方法读取字符数据，并存储到另一个容器中，直到读取到了换行符时，将另一个容器临时存储的数据转成字符串返回，就形成了readLine()功能。</p>\n<ul>\n<li><p>字节缓冲流</p>\n<ul>\n<li><code>public BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>InputStream</strong>。</li>\n<li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>OutputStream</strong>。</li>\n</ul>\n</li>\n<li><p>字符缓冲流</p>\n<ul>\n<li><code>public BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>Reader</strong>。</li>\n<li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>Writer</strong>。</li>\n</ul>\n<p>字符缓冲流特有的方法：</p>\n<ul>\n<li>BufferedReader：<code>public String readLine()</code>: <strong>读一行数据</strong>。 读取到最后返回null。</li>\n<li>BufferedWriter：<code>public void newLine()</code>: <strong>换行</strong>,由系统属性定义符号。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>转换流</p>\n<ul>\n<li><p>InputStreamReader：读取字节，并使用指定的字符集将其解码为字符。</p>\n<p><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</p>\n</li>\n<li><p>OutputStreamWriter：使用指定的字符集将字符编码为字节。</p>\n<p><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</p>\n</li>\n</ul>\n</li>\n</ol>\n","text":"Java 读取 .properties 配置文件的三种方式史上最骚最全最详细的IO流教程，没有之一！File一个File对象代表硬盘中实际存在的一个文件或者目录。File类构造方法不会给你检验这个文件或文件夹是否真实存在，因此无论该路径下是否存在文件或者目录，都不影响File对象","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Maven","slug":"maven","date":"2021-08-04T16:00:00.000Z","updated":"2021-08-05T09:07:55.236Z","comments":true,"path":"api/articles/maven.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><h2 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h2><ol>\n<li><p>maven本地仓库配置</p>\n<ul>\n<li><p>下载并安装本地maven，<code>.bash_profile</code>文件中配置环境变量，<code>.zshrc</code>文件中配置<code>source ~/.bash_profile</code>以</p>\n</li>\n<li><p>用以下命令下载didi私服本地仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -S -L https://git.xiaojukeji.com/elevate/environment/raw/master/setup-scripts/maven_setup.sh)</span><br></pre></td></tr></table></figure></li>\n<li><p>idea中使用默认配置。</p>\n</li>\n</ul>\n</li>\n<li><p>解决maven无法自动导入的依赖问题</p>\n<p><code>mvn clean package -DskipTests -P stable</code></p>\n</li>\n</ol>\n<h2 id=\"profiles标签\"><a href=\"#profiles标签\" class=\"headerlink\" title=\"profiles标签\"></a>profiles标签</h2><p>profiles标签：可以定义多个profile，然后每个profile对应不同的激活条件和配置信息，从而达到不同环境使用不同配置信息的效果。</p>\n<ul>\n<li><p>使用-P参数显示的激活一个profile</p>\n</li>\n<li><p>根据环境条件的设置让它自动激活：使用activeProfiles指定处于激活状态的profile。</p>\n</li>\n<li><p>根据环境来激活profile：比如根据操作系统的不同激活不同的profile，也可以根据jdk版本的不同激活不同的profile。</p>\n</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/java_collect/article/details/83870215\">maven（三）最详细的profile的使用</a></p>\n<p><a href=\"https://www.cnblogs.com/wxgblogs/p/6696229.html\">Maven学习-Profile详解</a></p>\n<h2 id=\"Maven打包\"><a href=\"#Maven打包\" class=\"headerlink\" title=\"Maven打包\"></a>Maven打包</h2>","text":"MavenMaven安装maven本地仓库配置下载并安装本地maven，.bash_profile文件中配置环境变量，.zshrc文件中配置source ~/.bash_profile以用以下命令下载didi私服本地仓库1<br>bash &lt;(curl -s -S -L h","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"java命令行执行程序","slug":"java程序启动","date":"2021-08-04T16:00:00.000Z","updated":"2021-08-05T09:06:31.568Z","comments":true,"path":"api/articles/java程序启动.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"java命令行执行程序\"><a href=\"#java命令行执行程序\" class=\"headerlink\" title=\"java命令行执行程序\"></a>java命令行执行程序</h1><h2 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h2><p>—hello</p>\n<p>​    —src</p>\n<p>​        —com</p>\n<p>​            —demo</p>\n<p>​                —Hello.java</p>\n<p>​    —target</p>\n<p>​        —com</p>\n<p>​            —demo</p>\n<p>​                —Hello.class</p>\n<p>​    —MANIFEST.MF</p>\n<p>​    —libs</p>\n<p>​        —gson-2.8.5.jar</p>\n<p>java文件的结构：</p>\n<ul>\n<li><p>package：必须指定包路径</p>\n</li>\n<li><p>import：某个类中引用了其他类要导包</p>\n</li>\n<li><p>class</p>\n</li>\n</ul>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><ul>\n<li><p>javac</p>\n<p><code>javac -cp &lt;第三方jar包|其他类中引用的类名.java&gt; &lt;类名.java&gt; -d &lt;指定编译后class类的存放路径&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac src/com/demo/Hello.java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d target 参数，指定 class 文件生成在 target 目录</span></span><br><span class=\"line\">javac src/com/demo/Hello.java -d target</span><br></pre></td></tr></table></figure></li>\n<li><p>java</p>\n<p>jar包运行</p>\n<ul>\n<li>指定manifest.mf，<code>java -jar &lt;可执行jar包&gt;</code></li>\n<li><del>未指定manifest.mf，<code>java -jar &lt;可执行jar包&gt; &lt;第三方jar包&gt; &lt;入口类&gt;</code></del></li>\n</ul>\n<p>不打包直接运行：<code>java -cp &lt;第三方jar包&gt; &lt;入口类&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -cp src 这个参数是把 src 目录添加到 classpath 目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用 : 分隔的目录, JAR 档案和 ZIP 档案列表</span></span><br><span class=\"line\">java -cp src com.demo.Hello</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 也可以直接执行，如果Hello文件中存在package包名，则在包名所在的目录下，通过包名访问</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在src目录下执行以下命令</span></span><br><span class=\"line\">java com.demo.Hello</span><br></pre></td></tr></table></figure></li>\n<li><p>javap</p>\n<p>javap反编译命令，主要用于帮助开发者深入了解 Java 编译器的机制</p>\n<p>-c：对代码进行反编译</p>\n<p>-public | protected | package | private：用于指定显示哪种级别的类成员</p>\n<p>-verbose：指定显示更进一步的详细信息</p>\n</li>\n<li><p>jar</p>\n<p>需指定manifest.mf文件，该文件包含：Main-Class（入口类）和Class-Path（将依赖包添加到类路径下）</p>\n<p><code>jar -cvfm &lt;自定义打包名&gt; MANIFEST.MF &lt;需打包的文件&gt;</code></p>\n<p>-c：创建一个jar包</p>\n<p>-v：生成详细的报造，并输出至标准设备</p>\n<p>-f：指定jar包的文件名</p>\n<p>-m：指定manifest.mf文件</p>\n<p>-C：转到相应的目录下执行jar命令，相当于cd到那个目录并不带-C执行jar命令</p>\n<p>-x：解压jar包</p>\n</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p><a href=\"https://www.cnblogs.com/eoalfj/p/12332808.html\">Java 命令行 编译、执行、打包</a></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>打包应只包含.class文件，创建target目录专门存放class文件。</p>\n<p>编译：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d target 参数，指定 class 文件生成在 target 目录</span></span><br><span class=\"line\">javac src/com/demo/Hello.java -d target</span><br></pre></td></tr></table></figure>\n\n<p>打包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -C target . 参数，指定把 target 目录下的所有文件打包</span></span><br><span class=\"line\">jar -cvf my.jar -C target .</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -cp my.jar 把 jar 包添加到 classpath 目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> com.demo.Hello 说明哪个类是入口</span></span><br><span class=\"line\">java -cp my.jar com.demo.Hello</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"可执行的jar包\"><a href=\"#可执行的jar包\" class=\"headerlink\" title=\"可执行的jar包\"></a>可执行的jar包</h3><p>项目路径下创建MANIFEST.MF文件，文件内说明程序入口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main-Class: com.demo.Hello</span><br></pre></td></tr></table></figure>\n\n<p>打包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加了 m 参数，指定 MANIFEST.MF，这个文件的内容会被添加到 jar 包的清单，用于说明 my.jar 的入口</span></span><br><span class=\"line\">jar -cvfm my.jar MANIFEST.MF -C target .</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar my.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"依赖第三方jar包的java代码编译执行\"><a href=\"#依赖第三方jar包的java代码编译执行\" class=\"headerlink\" title=\"依赖第三方jar包的java代码编译执行\"></a>依赖第三方jar包的java代码编译执行</h3><p>在项目目录下添加libs目录，并把jar包放入</p>\n<p>编译：</p>\n<p>编译的时候要将依赖包添加到classpath下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -cp libs/gson-2.8.5.jar 添加依赖包</span></span><br><span class=\"line\">javac -cp libs/gson-2.8.5.jar src/com/demo/HelloGson.java -d target</span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<p>将外部依赖包添加到classpath下才能运行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行时也需把 libs/gson-2.8.5.jar 添加到 classpath 路径中</span></span><br><span class=\"line\">java -cp target:libs/gson-2.8.5.jar com.demo.HelloGson</span><br></pre></td></tr></table></figure>\n\n<p>打包：</p>\n<p><a href=\"https://blog.csdn.net/whitenigt/article/details/80209472\">命令行打包jar</a></p>\n<p>打包成可执行jar包的时候，在MANIFEST.MF文件中配置classpath：</p>\n<p>注意打包命令加上-C后，manf文件中的Class-Path是相对于-C参数指定的目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main-Class: com.demo.Hello</span><br><span class=\"line\">Class-Path: libs/gson-2.8.5.jar</span><br></pre></td></tr></table></figure>\n\n<p>注意每个MANIFEST属性冒号与内容之间都有一个空格，并且写完后最后还要留有一行空行，不然运行时还是出现找不到主清单属性的错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar -cvfm my.jar MANIFEST.MF -C target .</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>胖包和瘦包问题</p>\n","text":"java命令行执行程序项目目录—hello​    —src​        —com​            —demo​                —Hello.java​    —target​        —com​            —demo​       ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"类加载器","slug":"类加载器","date":"2021-08-04T16:00:00.000Z","updated":"2021-08-05T09:07:15.096Z","comments":true,"path":"api/articles/类加载器.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Thread.currentThread().getContextClassLoader()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassLoader.getSystemClassLoader()</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>Class.getClassLoader()</code> </p>\n<p>返回加载类的类加载器，一些启动类加载器加载的类会反回null。</p>\n<p>returns the class loader for the class. Some implementations may use null to represent the bootstrap class loader. This method will return null in such implementations if this class was loaded by the bootstrap class loader.</p>\n","text":"Thread.currentThread().getContextClassLoader()1<br>ClassLoader.getSystemClassLoader()<br>Class.getClassLoader() 返回加载类的类加载器，一些启动类加载器加载的类会反回nu","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Git","slug":"git使用","date":"2021-08-04T16:00:00.000Z","updated":"2021-08-05T09:07:01.253Z","comments":true,"path":"api/articles/git使用.json","excerpt":"","keywords":null,"cover":"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804180015349.png","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><p><a href=\"https://git-scm.com/book/zh/v2\">中文Git官方文档</a></p>\n<h2 id=\"一、Git工作原理\"><a href=\"#一、Git工作原理\" class=\"headerlink\" title=\"一、Git工作原理\"></a>一、Git工作原理</h2><h3 id=\"1-Git工作区、暂存区和提交区\"><a href=\"#1-Git工作区、暂存区和提交区\" class=\"headerlink\" title=\"1.Git工作区、暂存区和提交区\"></a>1.Git工作区、暂存区和提交区</h3><p><a href=\"https://www.runoob.com/git/git-workspace-index-repo.html\">Git 工作区、暂存区和版本库</a></p>\n<ul>\n<li><p><strong>HEAD</strong>：当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。</p>\n</li>\n<li><p><strong>暂存区（索引）</strong>：预期的下一次提交。</p>\n</li>\n<li><p><strong>工作区</strong>：工作目录。</p>\n</li>\n</ul>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804180015349.png\" alt=\"image-20210804180015349\" style=\"zoom:67%;\" />\n\n<p>基本命令：</p>\n<ul>\n<li><p><strong>git init</strong>：将本地目录转化为Git仓库</p>\n</li>\n<li><p>**git add &lt;file&gt;**：暂存文件，将工作区修改的文件放入暂存区</p>\n</li>\n<li><p><strong>git commit</strong> <strong>-m</strong> <strong>“提交信息”：</strong>提交暂存区文件。</p>\n<p>​    -a：跳过使用暂存区域，直接提交，无需git add</p>\n</li>\n<li><p><strong>git rm &lt;file&gt;</strong> <strong>：</strong>从暂存区和工作区移除文件</p>\n<p>​    -f：强制删除之前修改过或已经放到暂存区的文件  –cached：仅删除暂存区文件</p>\n</li>\n<li><p><strong>git</strong> <strong>checkout</strong> <strong>– &lt;file&gt;<strong>：还未暂存的文件，</strong>将工作区文件替换为暂存区的文件</strong></p>\n</li>\n<li><p><strong>git</strong> <strong>checkout</strong> <strong>HEAD &lt;file&gt;<strong>：已经暂存的文件，</strong>将暂存取和工作区的文件替换为HEAD指针指向的提交节点的文件</strong></p>\n</li>\n</ul>\n<h3 id=\"2-文件的四种状态\"><a href=\"#2-文件的四种状态\" class=\"headerlink\" title=\"2.文件的四种状态\"></a>2.文件的四种状态</h3><img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804180812770.png\" alt=\"image-20210804180812770\" style=\"zoom:50%;\" />\n\n\n\n<ul>\n<li><p><strong>git status</strong>：查看文件状态，当前所在分支。</p>\n<p>-s或者–short：状态概览。新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 输出中有两栏，左栏指明暂存区的状态，右栏指明工作区的状态。</p>\n</li>\n<li><p><strong>git diff</strong>：查看尚未暂存的文件更新了哪些部分，工作目录中当前文件和暂存区域快照之间的差异。</p>\n<p>–staged或者–cached：查看已暂存文件与最后一次提交的文件差异。</p>\n</li>\n</ul>\n<h2 id=\"二、Git存储方式\"><a href=\"#二、Git存储方式\" class=\"headerlink\" title=\"二、Git存储方式\"></a>二、Git存储方式</h2><p>Git仓库中存在一个.git的隐藏文件夹。</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804192111858.png\" alt=\"image-20210804192111858\" style=\"zoom:50%;\" />\n\n<h3 id=\"objects（对象数据库）\"><a href=\"#objects（对象数据库）\" class=\"headerlink\" title=\"objects（对象数据库）\"></a>objects（对象数据库）</h3><p><a href=\"https://blog.csdn.net/u014609638/article/details/85237977\">【Git常用】之深入理解Git存储文档的方式</a></p>\n<p>Git采用<strong>树结构</strong>保存数据，以SHA-1值作为索引：</p>\n<ul>\n<li><p><strong>Blob数据对象：</strong>文件内容。</p>\n</li>\n<li><p><strong>Tree树对象：</strong>包含了一条或多条树对象记录（tree entry），每条记录含有一个指向<strong>数据对象</strong>或者<strong>子树对象</strong>的 SHA-1 指针，以及相应的模式、类型、文件名信息。</p>\n</li>\n<li><p><strong>Commit提交对象：</strong>记录了一些本次提交的重要内容，如提交者、作者、附注、以及<strong>指向tree的指针（tree）</strong>和<strong>指向父提交的指针（parent）</strong>。</p>\n</li>\n</ul>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804192709942.png\" alt=\"image-20210804192709942\" style=\"zoom:50%;\" />\n\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804192752090.png\" alt=\"image-20210804192752090\" style=\"zoom:50%;\" />\n\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804192723551.png\" alt=\"image-20210804192723551\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p><code>git cat-file -t &lt;commitHash&gt;</code> ：可以让 Git 告诉我们其内部存储的任何对象类型，只要给定该对象的 SHA-1 值。</p>\n</blockquote>\n<h3 id=\"Git底层实现\"><a href=\"#Git底层实现\" class=\"headerlink\" title=\"Git底层实现\"></a>Git底层实现</h3><p><a href=\"https://baijiahao.baidu.com/s?id=1667917800036579745&wfr=spider&for=pc\">图文并茂，详细讲解Git底层存储原理</a></p>\n<p>假设project目录下存在两个文件file1和file2:</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804192948388.png\" alt=\"image-20210804192948388\" style=\"zoom:30%;\" />\n\n<p><img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804193034978.png\" alt=\"image-20210804193034978\"></p>\n<h2 id=\"三、Git分支\"><a href=\"#三、Git分支\" class=\"headerlink\" title=\"三、Git分支\"></a>三、Git分支</h2><p>Git 的分支本质上仅仅是指向提交对象的可变<strong>指针</strong>，因此创建分支其实只是创建了一个指针。</p>\n<ul>\n<li><p>分支保存在**refs/heads/**文件夹下，文件中保存相应提交节点的SHA-1值。</p>\n</li>\n<li><p>master分支由git在init或者clone时自动生成。</p>\n</li>\n<li><p>HEAD保存当前所处的本地分支。</p>\n</li>\n</ul>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><ol>\n<li><p>创建分支：</p>\n<p><strong>git branch &lt;分支名&gt;</strong> </p>\n<p>在当前所在的提交对象上创建分支，但是并  不切换到新创建的分支上</p>\n</li>\n<li><p>分支切换：</p>\n<p><strong>git checkout &lt;分支名&gt;/&lt;commitHash&gt;</strong></p>\n<p>HEAD移动到指定分支或者提交节点</p>\n</li>\n<li><p>分支创建并切换：</p>\n<p><strong>git checkout -b &lt;分支名&gt;</strong></p>\n</li>\n</ol>\n<p>在当前节点创建testing分支：</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804194013103.png\" alt=\"image-20210804194013103\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"分支管理相关命令\"><a href=\"#分支管理相关命令\" class=\"headerlink\" title=\"分支管理相关命令\"></a>分支管理相关命令</h3><ul>\n<li><p><strong>git branch</strong>：查看所有分支，有*字符的分支为当前分支</p>\n<p>-v：查看每一分支的最后一次提交</p>\n<p>–merged：列出合并到当前分支的分支</p>\n<p>–no-merged：列出未合并到当前分支的分支</p>\n<p>-d &lt;分支名&gt;：删除分支，未合并的分支需要-D强制删除</p>\n</li>\n<li><p>在指定的提交节点上创建分支：</p>\n<p>git branch <new_branch> &lt;commitHash&gt;</p>\n</li>\n<li><p>查看各分支当前所指的对象：</p>\n<p>git log –oneline –decorate</p>\n</li>\n<li><p>提交历史、各个分支的指向以及项目的分支分叉情况：</p>\n<p><strong>git log –oneline –decorate –graph</strong></p>\n</li>\n</ul>\n<h3 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h3><p>**git merge &lt;分支名&gt;**：将&lt;分支名&gt;合并到当前分支。</p>\n<ol>\n<li><p>直接后继合并</p>\n<p>C4是C2的直接后继</p>\n<p><img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804194944167.png\" alt=\"image-20210804194944167\"></p>\n<p>将指定的提交应用于当前分支：<strong>git cherry-pick &lt;commitHash&gt;</strong></p>\n</li>\n<li><p>非直接后继的合并</p>\n<p>Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的公共祖先（C2），做<strong>三方合并</strong>。结果得到一个新的快照并且自动创建一个新的提交指向它。</p>\n<p>这个被称作一次<strong>合并提交</strong>，它的特别之处在于他有<strong>不止一个父提交</strong>。</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804195235101.png\" alt=\"image-20210804195235101\" style=\"zoom:67%;\" /></li>\n<li><p>合并冲突</p>\n<p>在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，在合并它们的时候就会产生<strong>合并冲突。</strong></p>\n<p>合并冲突的解决：</p>\n<ol>\n<li><p><strong>git status</strong> 查看那些因包含合并冲突而处于未合并（unmerged）状态的文件。</p>\n</li>\n<li><p>Git在有冲突的文件中加入标准的冲突解决标记，打开这些包含冲突的文件<strong>手动解决冲突</strong>或者<strong>使用工具解决冲突：git mergetool</strong>。</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804195707129.png\" alt=\"image-20210804195707129\" style=\"zoom:67%;\" /></li>\n<li><p><strong>git add</strong> 命令来将其标记为冲突已解决。</p>\n</li>\n<li><p><strong>git commit</strong> 来完成合并提交。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"四、远程仓库\"><a href=\"#四、远程仓库\" class=\"headerlink\" title=\"四、远程仓库\"></a>四、远程仓库</h2><p><strong>远程仓库：不仅表示仓库在网络或互联网上的其它位置，而只是表示它在别处。</strong></p>\n<h3 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h3><p><strong>远程分支</strong>：对远程仓库的引用（指针），包括分支、标签等。</p>\n<p><strong>远程跟踪分支</strong>（&lt;remote&gt;/&lt;branch&gt;）：远程分支状态的引用，比如origin/master。</p>\n<ul>\n<li><p>最后一次与远程仓库 origin 通信时分支的状态</p>\n</li>\n<li><p>无法在本地移动的，需要通过git fetch或者git pull命令才能移动。</p>\n</li>\n</ul>\n<p><strong>跟踪分支</strong>：在远程跟踪分支上建立的分支。</p>\n<p>作用：在跟踪分支上执行git pull，Git能自动识别去何服务器上加载，合并到何分支。</p>\n<ul>\n<li><p>创建跟踪分支：</p>\n<ul>\n<li><p>自定义跟踪分支名：<strong>git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</strong></p>\n</li>\n<li><p>与远程分支同名：<strong>git checkout –track &lt;remote&gt;/&lt;branch&gt;</strong></p>\n</li>\n</ul>\n</li>\n<li><p>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支：</p>\n<p>git branch -u &lt;remote&gt;/&lt;branch&gt;</p>\n</li>\n</ul>\n<blockquote>\n<p>git clone自动生成：远程跟踪分支origin/master分支和跟踪分支master分支。</p>\n</blockquote>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804200722263.png\" alt=\"image-20210804200722263\" style=\"zoom:50%;\" />\n\n\n\n<p><strong>远程分支其他命令：</strong></p>\n<ul>\n<li><p>查看远程分支：git ls-remote &lt;remote&gt;</p>\n</li>\n<li><p>查看远程分支的更多信息：git remote show &lt;remote&gt;</p>\n</li>\n<li><p>查看本地分支是领先还是落后，ahead本地分支领先，behind落后：</p>\n<p>git fetch –all; git branch -vv</p>\n</li>\n<li><p>删除远程分支：git push &lt;remote&gt; –delete &lt;branch&gt;</p>\n</li>\n</ul>\n<h3 id=\"克隆、拉取和推送命令\"><a href=\"#克隆、拉取和推送命令\" class=\"headerlink\" title=\"克隆、拉取和推送命令\"></a>克隆、拉取和推送命令</h3><p><img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804201748390.png\" alt=\"image-20210804201748390\"></p>\n<ul>\n<li><p>**git clone &lt;url&gt;**：添加远程仓库。</p>\n</li>\n<li><p><strong>git fetch &lt;remote&gt;<strong>：更新远程跟踪分支，会移动</strong>远程跟踪分支。</strong></p>\n<p>抓取克隆（或上一次抓取）后新推送的所有工作，但并不会自动合并或修改当前的工作。</p>\n</li>\n<li><p><strong>git pull</strong>：从最初克隆的服务器上<strong>抓取</strong>数据并自动尝试<strong>合并</strong>到当前所在的分支，相当于git fetch和git merge两个命令。</p>\n<p>在跟踪分支上执行git pull，Git能自动识别去何服务器上加载，合并到何分支。</p>\n</li>\n<li><p><strong>git push &lt;remote&gt; &lt;本地分支&gt;:&lt;远程分支&gt;</strong> <strong>：</strong>推送本地分支到远程仓库的分支上，必须先抓取并合并入本地后才能推送。</p>\n</li>\n</ul>\n<p>比如：</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804202320753.png\" alt=\"image-20210804202320753\" style=\"zoom:50%;\" />\n\n<p>执行git fetch origin后：</p>\n<ol>\n<li><p>origin/master分支移动</p>\n</li>\n<li><p>抓取克隆（或上一次抓取）后新推送的所有工作</p>\n</li>\n</ol>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804202331841.png\" alt=\"image-20210804202331841\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"远程仓库其他命令\"><a href=\"#远程仓库其他命令\" class=\"headerlink\" title=\"远程仓库其他命令\"></a>远程仓库其他命令</h3><ul>\n<li><p>在克隆的仓库中<strong>添加新的远程仓库</strong>：</p>\n<p>git remote add &lt;shortname&gt; &lt;url | path&gt;</p>\n</li>\n<li><p>查看远程仓库，clone的远程仓库名默认是origin：</p>\n<p>git remote</p>\n<p>​    -v：显示仓库对应的url</p>\n</li>\n<li><p>查看远程仓库信息，跟踪分支信息，当前所处分支等：</p>\n<p>git remote show &lt;remote&gt; </p>\n</li>\n<li><p>修改一个远程仓库的简写名：git remote rename</p>\n</li>\n<li><p>移除远程仓库：git remote remove 或 git remote rm</p>\n</li>\n</ul>\n<h3 id=\"远程仓库案例\"><a href=\"#远程仓库案例\" class=\"headerlink\" title=\"远程仓库案例\"></a>远程仓库案例</h3><ol>\n<li><p>合并两个有关联的远程仓库</p>\n<ul>\n<li><p>添加远程仓库：git remote add &lt;shortname&gt; &lt;url | path&gt;</p>\n</li>\n<li><p>拉取远程仓库的代码：git fetch &lt;仓库名称&gt;</p>\n</li>\n</ul>\n<p>将远程仓库teamone添加到本地仓库：</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804205157287.png\" alt=\"image-20210804205157287\" style=\"zoom:50%;\" />\n\n<p>合并后：</p>\n<img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804205214864.png\" alt=\"image-20210804205214864\" style=\"zoom:50%;\" /></li>\n<li><p>合并两个相互独立的仓库</p>\n<p>示例：将本地的gitdemo1仓库和gitdemo2仓库合并。</p>\n<ol>\n<li><p>将gitdemo2作为远程仓库添加到gitdemo1中，别名为other：</p>\n<p>git remote add other /Users/didi/Documents/gitdemo2</p>\n</li>\n<li><p>拉取other到gitdemo1仓库：</p>\n<p>git fetch other</p>\n</li>\n<li><p>创建跟踪分支two：</p>\n<p>git checkout -b two other/master</p>\n</li>\n<li><p>切换到master分支：</p>\n<p>git checkout master</p>\n</li>\n<li><p>合并分支：</p>\n<p>git merge two <strong>–allow-unrelated-histories</strong></p>\n</li>\n<li><p>解决合并冲突</p>\n</li>\n<li><p>查看提交历史、各个分支的指向以及项目的分支分叉情况：</p>\n<p>git log –oneline –decorate –graph</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"五、标签\"><a href=\"#五、标签\" class=\"headerlink\" title=\"五、标签\"></a>五、标签</h2><p><strong>标签</strong>可以理解为<strong>版本别名。</strong>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，可以在快照上打标签。</p>\n<p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。</p>\n<ul>\n<li><p>轻量标签：某个特定提交的引用。</p>\n</li>\n<li><p>附注标签：存储在 Git 数据库中的一个完整对象，可被校验，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息。</p>\n</li>\n</ul>\n<p>标签相关命令：</p>\n<ul>\n<li><p>列出所有标签：git tag</p>\n<p>​      -l &lt;pattern&gt;：按特定模式查找标签</p>\n</li>\n<li><p>创建附注标签：git tag -a &lt;tagname&gt; -m “my version 1.4”</p>\n</li>\n<li><p>创建轻量标签：git tag &lt;tagname&gt;</p>\n</li>\n<li><p>对过去的提交打标签：git tag -a &lt;tagname&gt; &lt;commitHash&gt;</p>\n</li>\n<li><p><strong>查看标签信息和与之对应的提交信息：git show &lt;tagname&gt;</strong></p>\n</li>\n<li><p>标签需要显式推送： git push origin &lt;tagname&gt;</p>\n</li>\n<li><p>推送所有不在远程仓库服务器上的标签：git push origin –tags</p>\n</li>\n<li><p>删除掉你本地仓库上的标签：git tag -d &lt;tagname&gt;</p>\n</li>\n<li><p>删除远程标签：git push origin –delete &lt;tagname&gt;</p>\n</li>\n</ul>\n<h2 id=\"六、Git常用命令\"><a href=\"#六、Git常用命令\" class=\"headerlink\" title=\"六、Git常用命令\"></a>六、Git常用命令</h2><h3 id=\"1-撤销\"><a href=\"#1-撤销\" class=\"headerlink\" title=\"1. 撤销\"></a>1. 撤销</h3><p>Git中所有已提交的几乎都可以恢复，但是未提交的可能再也找不到。</p>\n<ol>\n<li><p>上一次提交中漏了几个文件或者提交信息写错</p>\n<p><strong>git</strong> <strong>commit</strong> <strong>–amend</strong>：将暂存区中的文件提交，<strong>覆盖</strong>上一次提交</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&#x27;initial commit’ </span></span><br><span class=\"line\"><span class=\"string\">$ git add forgotten_file </span></span><br><span class=\"line\"><span class=\"string\">$ git commit --amend -m “修改后的提交信息”</span></span><br></pre></td></tr></table></figure></li>\n<li><p>已经修改了两个文件并且想要将它们作为两次独立的修改提交， 但是却意外地输入 <code>git add .</code> 暂存了它们两个。</p>\n<p>git reset HEAD &lt;file&gt;：取消暂存文件</p>\n</li>\n<li><p>撤销对文件的修改</p>\n<ul>\n<li><p>还未暂存的文件使用：</p>\n<p><strong>git</strong> <strong>checkout</strong> <strong>– &lt;file&gt;</strong></p>\n<p><strong>将工作区文件替换为暂存区的文件</strong></p>\n</li>\n<li><p>已经暂存的文件使用：</p>\n<p><strong>git</strong> <strong>checkout</strong> <strong>HEAD &lt;file&gt;</strong></p>\n<p><strong>将暂存取和工作区的文件替换为HEAD指针指向的提交节点的文件</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h4><p>git reset HEAD~n：移动HEAD和HEAD指向的分支到前n个提交节点。</p>\n<ul>\n<li>git reset –soft HEAD~</li>\n<li>git reset [–mixed] HEAD~：将暂存区替换为HEAD前一个节点</li>\n<li>git reset –hard HEAD~：将暂存区和工作区都替换为HEAD前一个节点</li>\n</ul>\n<p><img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804204300984.png\" alt=\"image-20210804204300984\"></p>\n<p><strong>带路径：</strong>不移动HEAD指针</p>\n<ul>\n<li><p>**git reset &lt;file&gt;**：取消暂存文件</p>\n</li>\n<li><p>**git reset &lt;commitHash&gt; &lt;file&gt;**：从指定节点中拉取文件来替换暂存区中的文件。</p>\n</li>\n</ul>\n<p>git checkout &lt;branch&gt;</p>\n<ul>\n<li><p>存在已修改文件时切换时会有提示</p>\n</li>\n<li><p>只移动HEAD自身</p>\n</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/yxlshk/article/details/79944535\">reset和revert的区别</a>：</p>\n<p><img src=\"https://lexie-1306706019.cos.ap-shanghai.myqcloud.com/assets/image-20210804204632156.png\" alt=\"image-20210804204632156\"></p>\n<h3 id=\"2-查看提交历史\"><a href=\"#2-查看提交历史\" class=\"headerlink\" title=\"2. 查看提交历史\"></a>2. 查看提交历史</h3><p><strong>git log</strong>：显示提交记录</p>\n<p>​    -p 或 –patch ：显示每次提交所引入的差异</p>\n<p>​    -数字：显示最近的n次提交</p>\n<p>​    –stat：显示每次提交的简略统计信息</p>\n<p>​    –pretty=online：每个提交在一行显示</p>\n<p>​    –pretty=format:“格式”：定制记录的显示格式</p>\n<p>​    –since=&lt;date&gt;</p>\n<p>​    –author=&lt;name&gt;：显示指定作者的提交</p>\n<p>​    –grep=&lt;key&gt;：搜索提交中的关键字</p>\n<p>​    – &lt;path&gt;：显示指定文件目录的提交历史</p>\n<ul>\n<li><p>查看各分支当前所指的对象：</p>\n<p>git log –oneline –decorate</p>\n</li>\n<li><p>提交历史、各个分支的指向以及项目的分支分叉情况：</p>\n<p><strong>git log –oneline –decorate –graph</strong></p>\n</li>\n</ul>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><ol>\n<li><p><strong>直接记录快照，而非差异比较</strong></p>\n<p>本地存储一个对象数据库，每当你提交更新或保存项目状态时，对当时的全部文件创建一个快照并保存这个快照的索引。 为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 </p>\n</li>\n<li><p><strong>近乎所有操作都是本地执行</strong></p>\n<p>在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。</p>\n<p>Git 处理分支的方式非常轻量，创建新分支只是创建一个引用，几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。</p>\n</li>\n<li><p><strong>Git</strong> <strong>保证完整性</strong></p>\n<p>Git 中所有的数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。</p>\n</li>\n</ol>\n<h2 id=\"八、遇到的问题\"><a href=\"#八、遇到的问题\" class=\"headerlink\" title=\"八、遇到的问题\"></a>八、遇到的问题</h2><ol>\n<li><p>问题运行git pull报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/wangyywyy/wangyywyy.github.io.git/&#x27;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</span><br></pre></td></tr></table></figure>\n\n<p>原因：git config –global –list没有配置用户名邮箱</p>\n<p>解决：配置以下信息：</p>\n<p>git config –global user.name “wangyywyy”</p>\n<p>git config –global user.email “<a href=\"mailto:&#119;&#97;&#x6e;&#103;&#121;&#121;&#120;&#x74;&#121;&#106;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;\">&#119;&#97;&#x6e;&#103;&#121;&#121;&#120;&#x74;&#121;&#106;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;</a>“</p>\n</li>\n<li><p>git push origin master报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: src refspec master does not match any</span><br><span class=\"line\">error: failed to push some refs to &#x27;https://github.com/wangyywyy/wangyywyy.github.io.git&#x27;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","text":"Git中文Git官方文档一、Git工作原理1.Git工作区、暂存区和提交区Git 工作区、暂存区和版本库HEAD：当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。暂存区（索引）：预期的下一次提交。工作区：工作目录。 [Figure","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Log4j","slug":"Log4j","date":"2021-07-30T07:39:33.275Z","updated":"2021-08-05T02:41:06.427Z","comments":true,"path":"api/articles/Log4j.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Log4j\"><a href=\"#Log4j\" class=\"headerlink\" title=\"Log4j\"></a>Log4j</h1><p><strong>使用log4j 需要加载的jar包有</strong>：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log4j</span>.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Log4j三大组件\"><a href=\"#Log4j三大组件\" class=\"headerlink\" title=\"Log4j三大组件\"></a>Log4j三大组件</h2><p><a href=\"http://liuzhijun.iteye.com/blog/1746571\">快速了解Log4J</a></p>\n<p>一个logger可对应多个appender，一个appender只能对应一个layout。</p>\n<ul>\n<li><p><strong>Logger：日志记录器，负责收集处理日志记录   （如何处理日志）</strong></p>\n<ul>\n<li><p><strong>Root</strong> Logger：所有日志都会直接或者间接地继承自root。</p>\n<p>通过<code>Logger.getRootLogger()</code>方法获取根日志。</p>\n</li>\n<li><p>日志的创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger.getLogger(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// log4j</span></span><br><span class=\"line\">LogManager.getLogger(<span class=\"string\">&quot;name&quot;</span>);<span class=\"comment\">// log4j2</span></span><br></pre></td></tr></table></figure>\n\n<p>log的name就是XX类的全限定类名。Logger的命名有继承机制：name为com.yy的logger会继承name为com的logger。</p>\n</li>\n<li><p>Level</p>\n<p>日志级别（从高到低）：OFF（关闭）FATAL（致命的） ERROR（错误）WARN（警告） INFO（信息）DEBUG （调试） ALL（所有）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.info(message);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果logger的Level设置为INFO，那么系统只输出INFO以及以上（WARN、ERROR、FATAL）信息。</p>\n</li>\n<li><p>如果当前logger没有设定Level，那么它会使用它继承的Logger的Level作为它自己的Level来处理。不断往上上级寻找不为空的Level，直到root为止（root的Level不能设为空）<strong>。默认root的Level是INFO，其他logger的Level默认都是null，需要手动指定。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Appender：日志输出目的地，负责日志的输出（输出到什么 地方）</p>\n<p>通过<code>logger.addAppender(appender)</code>配置多个appender。</p>\n<p>每个有效的日志请求结果都将输出到logger本身以及父logger的appender上。可以通过<code>logger.setAdditivity(false);</code>让日志仅在logger本身输出。</p>\n<p>常用appender：</p>\n<ul>\n<li>org.apache.log4j.<strong>ConsoleAppender</strong>（控制台</li>\n<li>org.apache.log4j.FileAppender（文件）</li>\n<li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li>\n<li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li>\n<li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li>\n</ul>\n</li>\n<li><p>Layout：日志格式化，负责对输出的日志格式化（以什么形式展现）</p>\n<p>常见layout：</p>\n<ul>\n<li><p>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</p>\n</li>\n<li><p>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</p>\n</li>\n<li><p>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</p>\n</li>\n<li><p>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger com = Logger.getLogger(<span class=\"string\">&quot;com&quot;</span>);  </span><br><span class=\"line\">Appender appender = <span class=\"keyword\">new</span> FileAppender(<span class=\"keyword\">new</span> SimpleLayout(),<span class=\"string\">&quot;hello.log&quot;</span>);  </span><br><span class=\"line\">com.addAppender(appender);  </span><br><span class=\"line\">  </span><br><span class=\"line\">Logger iteye = Logger.getLogger(<span class=\"string\">&quot;com.iteye&quot;</span>);  </span><br><span class=\"line\">iteye.addAppender(<span class=\"keyword\">new</span> ConsoleAppender(<span class=\"keyword\">new</span> SimpleLayout(), <span class=\"string\">&quot;System.out&quot;</span>));  <span class=\"comment\">//target:sys.out(default) 或 sys.err  </span></span><br><span class=\"line\">iteye.info(<span class=\"string\">&quot;hello world&quot;</span>);  </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Log4j配置\"><a href=\"#Log4j配置\" class=\"headerlink\" title=\"Log4j配置\"></a>Log4j配置</h2><ol>\n<li><p>配置根Logger</p>\n<p>一般情况下，只需要配置根记录器rootLogger即可，<strong>所有的logger都会沿用rootLogger的配置。</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> =  <span class=\"string\">[ level ]  , appenderName1 , appenderName2 , … </span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置日志信息输出目的地（Appender）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName</span> = <span class=\"string\">fully.qualified.name.of.appender.class  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.option1</span> = <span class=\"string\">value1  </span></span><br><span class=\"line\"><span class=\"comment\"># …  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.optionN</span> = <span class=\"string\">valueN </span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置日志信息的格式（Layout）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout</span> = <span class=\"string\">fully.qualified.name.of.layout.class  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout.option1</span> = <span class=\"string\">value1  </span></span><br><span class=\"line\"><span class=\"comment\"># …  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout.optionN</span> = <span class=\"string\">valueN  </span></span><br></pre></td></tr></table></figure>\n\n<p>其中<strong>ConversionPattern</strong>参数的格式含义</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">格式名</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%c</td>\n<td align=\"left\">输出日志信息所属的类的全名</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"left\">输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"left\">输出日志信息所属的类的类名</td>\n</tr>\n<tr>\n<td align=\"center\">%l</td>\n<td align=\"left\">输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行</td>\n</tr>\n<tr>\n<td align=\"center\">%m</td>\n<td align=\"left\">输出代码中指定的信息，如log(message)中的message</td>\n</tr>\n<tr>\n<td align=\"center\">%n</td>\n<td align=\"left\">输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"left\">输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推</td>\n</tr>\n<tr>\n<td align=\"center\">%r</td>\n<td align=\"left\">输出自应用启动到输出该日志信息所耗费的毫秒数</td>\n</tr>\n<tr>\n<td align=\"center\">%t</td>\n<td align=\"left\">输出产生该日志事件的线程名</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置根Logger </span></span><br><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> = <span class=\"string\">DEBUG,stdout,file</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### 输出到控制台 ###  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout</span> = <span class=\"string\">org.apache.log4j.ConsoleAppender  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.Target</span> = <span class=\"string\">System.out   #默认就是System.out，另外一个值是System.error  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout</span> = <span class=\"string\">org.apache.log4j.PatternLayout  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout.ConversionPattern</span> =  <span class=\"string\">%d&#123;ABSOLUTE&#125; %5p %c&#123; 1 &#125;:%L - %m%n  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### 输出到文件 ###  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file</span> = <span class=\"string\">org.apache.log4j.DailyRollingFileAppender  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.File</span> = <span class=\"string\">logs/log.log  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.Append</span> = <span class=\"string\">true   #默认就是true，系统启动时追加至文件中，否则会覆盖原有内容  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.Threshold</span> = <span class=\"string\">INFO ## 输出IFNO级别以上的日志，这里的意思是rootLogger设置为DEBUG时，只输出INFO以上（INFO、WARN、ERROR、FATAL）的信息到文件中去，而DEBUG信息就不会输出了  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置日志信息的格式（Layout）</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout</span> = <span class=\"string\">org.apache.log4j.PatternLayout  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout.ConversionPattern</span> = <span class=\"string\">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n  </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Log4j2\"><a href=\"#Log4j2\" class=\"headerlink\" title=\"Log4j2\"></a>Log4j2</h1><p><a href=\"https://blog.csdn.net/loophome/article/details/94033039\">Java Log4j和Log4j2的区别</a></p>\n<p><strong>使用log4j2 需要加载的jar包有</strong>：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log4j</span>-api-[version].jar</span><br><span class=\"line\"><span class=\"attribute\">log4j</span>-core-[version].jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Log4j2配置\"><a href=\"#Log4j2配置\" class=\"headerlink\" title=\"Log4j2配置\"></a>Log4j2配置</h2><p>没有log4j2的配置文件，将使用缺省配置：控制台log的级别为error，log自身的日志级别为trace。（log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的配置文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台。）</p>\n<p><a href=\"https://blog.csdn.net/vbirdbest/article/details/71751835#t8\">五：log4j2配置文件详解</a></p>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><p><a href=\"http://logging.apache.org/log4j/2.x/manual/plugins.html\">Plugin</a></p>\n<p><a href=\"https://github.com/OuZhencong/log4j2/wiki/Log4j-2%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6\">Log4j 2的插件机制</a></p>\n<p>Log4j 2的扩展机制：通过在初始化时调用PluginManager，然后PluginManager则会去扫描在配置文件中声明的那些packages，如果找到了相应的被注解为plugin的类，则会去加载这些plugin。</p>\n<p>配置方式如下：</p>\n<p>在Log4j 2初始化时，PluginManager去扫描 <strong>org.apache.logging.log4j.test</strong> 这个包，去加载那些注解为plugin的类。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">status</span>=<span class=\"string\">&quot;debug&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;XMLConfigTest&quot;</span> <span class=\"attr\">packages</span>=<span class=\"string\">&quot;org.apache.logging.log4j.test&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h3><p>核心插件是那些直接由配置文件中的元素表示的插件，例如：Appender、Logger以及Filter。</p>\n<ol>\n<li><p>首先，每一个Core plugin都必须在其类声明加上@Plugin注解，并且声明清楚其中的各个属性。</p>\n<p>用户在其配置中通过@Plugin上配置的name 属性来使用Appender。如果 Appender 的属性值是使用toString 方法传递的，Appender 应将 printObject 指定为“true”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Plugin</span> (name = <span class=\"string\">&quot;Async&quot;</span> , category = <span class=\"string\">&quot;Core&quot;</span>, elementType = <span class=\"string\">&quot;appender&quot;</span> , printObject = <span class=\"keyword\">true</span> )</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAppender</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>每一个Core plugin的类，都必须声明一个static方法，并且被加上@PluginFactory注解。这个方法可以用来接收log4j.xml的传参数，可以自行添加接收，和log4j.xml 中传参数对应上就行（用于Log4j初始化的时候生成一个具体的plugin实例。）</p>\n<p>每个元素的注解都必须包含配置中存在的名称，以便将配置项与其各自的参数相匹配。为了允许配置将正确的参数传递给方法，方法的每个参数都必须注释为以下属性类型之一：</p>\n<ul>\n<li><strong>PluginAttribute</strong>：该参数必须可以使用<a href=\"http://logging.apache.org/log4j/2.x/manual/plugins.html#TypeConverters\">TypeConverter</a>从 String 转换。(这个字段在配置文件中可以通过字符串来创建的简单类型参数。)</li>\n<li><strong>PluginElement</strong>：参数可能代表一个复杂的对象，它本身具有可以配置的参数。这也支持注入元素数组。</li>\n<li>PluginConfiguration：当前这个配置的配置对象，作为一个参数传入这个plugin实例中。</li>\n<li>PluginNode</li>\n<li>PluginValue</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PluginFactory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailAppender <span class=\"title\">createAppender</span><span class=\"params\">(<span class=\"meta\">@PluginAttribute(&quot;name&quot;)</span>String name,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"meta\">@PluginElement(&quot;Filters&quot;)</span>Filter filter,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"meta\">@PluginElement(&quot;Layout&quot;)</span>Layout layout)</span></span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>也可以使用<code>@PluginBuilderFactory</code>注解，用于构造一个新的 Builder&lt;T&gt; 类，其字段用于注入属性和子节点。如果注解（<code>@PluginAttribute</code>、<code>@PluginElement</code>等）中未指定名称，则默认使用字段名称。</p>\n</li>\n</ol>\n<h4 id=\"Appenders\"><a href=\"#Appenders\" class=\"headerlink\" title=\"Appenders\"></a>Appenders</h4><p><a href=\"http://logging.apache.org/log4j/2.x/manual/extending.html#Plugin_Builders\">Appenders</a></p>\n<p>Appenders 被传递一个事件，调用一个Layout来格式化事件，然后以任何需要的方式“发布”事件。</p>\n","text":"Log4j使用log4j 需要加载的jar包有：1<br>log4j.jar<br>Log4j三大组件快速了解Log4J一个logger可对应多个appender，一个appender只能对应一个layout。Logger：日志记录器，负责收集处理日志记录   （如何处理日志）R","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Log4j组件Appender发消息","slug":"Log4j组件Appender发消息","date":"2021-07-30T03:51:55.940Z","updated":"2021-08-05T09:09:55.744Z","comments":true,"path":"api/articles/Log4j组件Appender发消息.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"自定义MailAppender\"><a href=\"#自定义MailAppender\" class=\"headerlink\" title=\"自定义MailAppender\"></a>自定义MailAppender</h1><ol start=\"0\">\n<li>引入Log4j2的相关依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>MailAppender的实现：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义Appender，实现把日志内容发送到邮箱。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// Plugin注解将一个类声明为log4j的插件</span></span><br><span class=\"line\"><span class=\"meta\">@Plugin(name=&quot;mail&quot;, category = &quot;core&quot;, elementType = &quot;appender&quot;, printObject = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAppender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要实现构造方法，直接用父类的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">MailAppender</span><span class=\"params\">(String name, Filter filter, Layout&lt;? extends Serializable&gt; layout)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, filter, layout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MailAppender</span><span class=\"params\">(String name, Filter filter, Layout&lt;? extends Serializable&gt; layout, <span class=\"keyword\">boolean</span> ignoreExceptions)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, filter, layout, ignoreExceptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">append</span><span class=\"params\">(LogEvent logEvent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = getLayout().toByteArray(logEvent);</span><br><span class=\"line\">        String text = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\">        MailUtil.sendMail(text, <span class=\"string\">&quot;This a Mail from log&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t<span class=\"comment\">//获取配置文件中的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@PluginFactory</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailAppender <span class=\"title\">createAppender</span><span class=\"params\">(<span class=\"meta\">@PluginAttribute(&quot;name&quot;)</span>String name,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                              <span class=\"meta\">@PluginElement(&quot;Filters&quot;)</span>Filter filter,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                              <span class=\"meta\">@PluginElement(&quot;Layout&quot;)</span>Layout layout)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            LOGGER.error(<span class=\"string\">&quot;No name provided for MailAppender&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(layout == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            layout = PatternLayout.createDefaultLayout();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MailAppender(name, filter, layout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Log4j2.xml文件配置：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- packages指定程序启动时需要扫描的包，以发现自定义的Appender --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Configuration</span> <span class=\"attr\">packages</span>=<span class=\"string\">&quot;com.yy.appender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mail</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mail&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mail</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mailLogger&quot;</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;mail&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Logger</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Root</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger log = LogManager.getLogger(<span class=\"string\">&quot;mailLogger&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;这是一封info级别的日志！&quot;</span>);</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;这是一封error级别的日志！&quot;</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;这是一封debug级别的日志！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"发邮件\"><a href=\"#发邮件\" class=\"headerlink\" title=\"发邮件\"></a>发邮件</h1><ul>\n<li><p><strong>Message</strong>：创建和解析邮件，表示一封电子邮件，包含邮件收件人，发件人，邮件内容和主题等。</p>\n</li>\n<li><p><strong>Transport</strong>：发送邮件，连接服务器、发送Message、关闭连接。</p>\n</li>\n<li><p><strong>Session</strong>：定义整个应用程序所需的环境信息，以及收集客户端与邮件服务器建立网络连接的会话信息，例如邮件服务器的主机名、端口号、采用的邮件发送和接收协议等。</p>\n</li>\n</ul>\n<ol>\n<li>引入邮件依赖：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sun.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.mail-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>发送邮件代码</li>\n</ol>\n<p>（1）简单文本邮件代码如下：</p>\n<p><a href=\"https://www.cnblogs.com/ysocean/p/7666061.html\">邮件实现详解（四）——JavaMail 发送（带图片和附件）和接收邮件</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream.GetField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Address;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.MessagingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.Transport;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.AddressException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.InternetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.mail.internet.MimeMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.text.html.MinimalHTMLWriter;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendMailText</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//发件人地址</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String senderAddress =<span class=\"string\">&quot;xxx@163.com&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//收件人地址</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String recipientAddress =<span class=\"string\">&quot;xxx@qq.com&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//发件人账户名</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String senderAccount =<span class=\"string\">&quot;xxx&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//发件人账户密码</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String senderPassword =<span class=\"string\">&quot;xxx&quot;</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1、连接邮件服务器的参数配置</span></span><br><span class=\"line\">        Properties props =<span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"comment\">//设置用户的认证方式</span></span><br><span class=\"line\">        props.setProperty(<span class=\"string\">&quot;mail.smtp.auth&quot;</span>,<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置传输协议</span></span><br><span class=\"line\">        props.setProperty(<span class=\"string\">&quot;mail.transport.protocol&quot;</span>,<span class=\"string\">&quot;smtp&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置发件人的SMTP服务器地址</span></span><br><span class=\"line\">        props.setProperty(<span class=\"string\">&quot;mail.smtp.host&quot;</span>,<span class=\"string\">&quot;smtp.163.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2、创建定义整个应用程序所需的环境信息的 Session 对象</span></span><br><span class=\"line\">        Session session = Session.getInstance(props);</span><br><span class=\"line\">        <span class=\"comment\">//设置调试信息在控制台打印出来</span></span><br><span class=\"line\">        session.setDebug(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3、创建邮件的实例对象</span></span><br><span class=\"line\">        Message msg = getMimeMessage(session);</span><br><span class=\"line\">        <span class=\"comment\">//4、根据session对象获取邮件传输对象Transport</span></span><br><span class=\"line\">        Transport transport = session.getTransport();</span><br><span class=\"line\">        <span class=\"comment\">//设置发件人的账户名和密码</span></span><br><span class=\"line\">        transport.connect(senderAccount, senderPassword);</span><br><span class=\"line\">        <span class=\"comment\">//发送邮件，并发送到所有收件人地址，message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</span></span><br><span class=\"line\">        transport.sendMessage(msg,msg.getAllRecipients());</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">//如果只想发送给指定的人，可以如下写法</span></span><br><span class=\"line\">        <span class=\"comment\">//transport.sendMessage(msg, new Address[]&#123;new InternetAddress(&quot;xxx@qq.com&quot;)&#125;);</span></span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">//5、关闭邮件连接</span></span><br><span class=\"line\">        transport.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得创建一封邮件的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> session</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> MessagingException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> AddressException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MimeMessage <span class=\"title\">getMimeMessage</span><span class=\"params\">(Session session)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一封邮件的实例对象</span></span><br><span class=\"line\">        MimeMessage msg =<span class=\"keyword\">new</span> MimeMessage(session);</span><br><span class=\"line\">        <span class=\"comment\">//设置发件人地址</span></span><br><span class=\"line\">        msg.setFrom(<span class=\"keyword\">new</span> InternetAddress(senderAddress));</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置收件人地址（可以增加多个收件人、抄送、密送），即下面这一行代码书写多行</span></span><br><span class=\"line\"><span class=\"comment\">         * MimeMessage.RecipientType.TO:发送</span></span><br><span class=\"line\"><span class=\"comment\">         * MimeMessage.RecipientType.CC：抄送</span></span><br><span class=\"line\"><span class=\"comment\">         * MimeMessage.RecipientType.BCC：密送</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        msg.setRecipient(MimeMessage.RecipientType.TO,<span class=\"keyword\">new</span> InternetAddress(recipientAddress));</span><br><span class=\"line\">        <span class=\"comment\">//设置邮件主题</span></span><br><span class=\"line\">        msg.setSubject(<span class=\"string\">&quot;邮件主题&quot;</span>,<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置邮件正文</span></span><br><span class=\"line\">        msg.setContent(<span class=\"string\">&quot;简单的纯文本邮件！&quot;</span>,<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置邮件的发送时间,默认立即发送</span></span><br><span class=\"line\">        msg.setSentDate(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>（2）Authenticator认证结合Transport的静态send方法发送邮件，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMail</span><span class=\"params\">(String text, String subject)</span></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">final</span> Properties prop = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">  \t<span class=\"comment\">// 读取配置文件</span></span><br><span class=\"line\">  \tInputStream in = MailUtil.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;mail.properties&quot;</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t\tprop.load(in);</span><br><span class=\"line\">    \t\tin.close();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 开启认证</span></span><br><span class=\"line\">    \t\tprop.setProperty(<span class=\"string\">&quot;mail.smtp.auth&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 邮件传输协议</span></span><br><span class=\"line\">    \t\tprop.setProperty(<span class=\"string\">&quot;mail.transport.protocol&quot;</span>, <span class=\"string\">&quot;smtp&quot;</span>);</span><br><span class=\"line\">      \t<span class=\"comment\">// 服务器地址</span></span><br><span class=\"line\">    \t\tprop.setProperty(<span class=\"string\">&quot;mail.host&quot;</span>, <span class=\"string\">&quot;smtp.qq.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">// 邮箱认证</span></span><br><span class=\"line\">    \t\tAuthenticator auth = <span class=\"keyword\">new</span> Authenticator() &#123;</span><br><span class=\"line\">      \t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">      \t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        \t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PasswordAuthentication(prop.getProperty(<span class=\"string\">&quot;mailFrom&quot;</span>), prop.getProperty(<span class=\"string\">&quot;mailPassword&quot;</span>));</span><br><span class=\"line\">      \t\t\t&#125;</span><br><span class=\"line\">    \t\t&#125;;</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 使用邮件信息和授权信息创建会话</span></span><br><span class=\"line\">    \t\tSession mailSession = Session.getInstance(prop, auth);</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 创建邮件消息</span></span><br><span class=\"line\">    \t\tMimeMessage message = <span class=\"keyword\">new</span> MimeMessage(mailSession);</span><br><span class=\"line\">    \t\t<span class=\"comment\">// 设置发件人</span></span><br><span class=\"line\">    \t\tmessage.setFrom(<span class=\"keyword\">new</span> InternetAddress(prop.getProperty(<span class=\"string\">&quot;mailFrom&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">// 设置收件人</span></span><br><span class=\"line\">    \t\tmessage.setRecipient(Message.RecipientType.TO, <span class=\"keyword\">new</span> InternetAddress(prop.getProperty(<span class=\"string\">&quot;mailTo&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">// 设置邮件内容</span></span><br><span class=\"line\">    \t\tmessage.setSubject(subject);</span><br><span class=\"line\">    \t\tmessage.setContent(text, <span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">// 发送邮件</span></span><br><span class=\"line\">    \t\tTransport.send(message);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    \t\te.printStackTrace();</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">catch</span> (AddressException e) &#123;</span><br><span class=\"line\">    \t\te.printStackTrace();</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">catch</span> (MessagingException e) &#123;</span><br><span class=\"line\">    \t\te.printStackTrace();</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mail.properties文件：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发件人邮箱</span></span><br><span class=\"line\"><span class=\"attr\">mailFrom</span>=<span class=\"string\">xxx@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"># 发件人邮箱密码</span></span><br><span class=\"line\"><span class=\"attr\">mailPassword</span>=<span class=\"string\">xxxxx</span></span><br><span class=\"line\"><span class=\"comment\"># 收件人</span></span><br><span class=\"line\"><span class=\"attr\">mailTo</span>=<span class=\"string\">yyy@163.com</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"HttpClient\"><a href=\"#HttpClient\" class=\"headerlink\" title=\"HttpClient\"></a>HttpClient</h1><p><a href=\"https://blog.csdn.net/xcxzzx01/article/details/108299813\">(新版）通过java程序，给微信发送消息</a></p>\n<p><a href=\"https://blog.csdn.net/justry_deng/article/details/81042379\">HttpClient详细使用示例</a></p>\n<p>使用HttpClient发送请求、接收响应，一般需要如下几步:</p>\n<ol>\n<li>创建HttpClient对象。</li>\n<li>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</li>\n<li>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</li>\n<li>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</li>\n<li>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</li>\n<li>释放连接。无论执行方法是否成功，都必须释放连接</li>\n</ol>\n","text":"自定义MailAppender引入Log4j2的相关依赖1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.apache.logging.log","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"日志","slug":"日志","count":1,"path":"api/tags/日志.json"}]},{"title":"Hello World","slug":"hello-world","date":"2021-07-28T07:57:15.909Z","updated":"2021-07-28T07:57:15.909Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Github pages个人博客的搭建","slug":"Github pages个人博客的搭建","date":"2021-07-28T06:18:25.920Z","updated":"2021-07-30T03:59:16.372Z","comments":true,"path":"api/articles/Github pages个人博客的搭建.json","excerpt":"","keywords":null,"cover":null,"content":"<p><a href=\"https://blog.csdn.net/qq_36759224/article/details/82121420\">使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a></p>\n<h2 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h2><p><a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site\">创建github仓库</a></p>\n<ol>\n<li><p>仓库名称为&lt;guthub username&gt;.github.io</p>\n</li>\n<li><p>生成SSH key，添加到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;github username&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;github email&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在.ssh文件夹中，将id_rsa.pub这个公钥添加到github—setting—SSH keys中</p>\n<p>使用<code>ssh -T git@github.com</code>查看是否设置成功。</p>\n</li>\n</ol>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><a href=\"https://hexo.io/zh-cn/docs/\">安装Hexo</a></p>\n<ol>\n<li><p><a href=\"https://www.jianshu.com/p/e0471aa6672d?utm_campaign=hugo\">安装homebrew</a></p>\n<p>Homebrew是 mac的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，可以省掉自己去下载、解压、拖拽(安装)等繁琐的步骤。 </p>\n<ul>\n<li><p>brew镜像安装脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>为了提升使用homebrew安装软件的速度，需要更改 Homebrew 的安装源，将其替换成国内镜像。</p>\n<p>替换brew.git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>\n\n<p>替换 homebrew-core.git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>\n\n<p>替换homebrew-bottles：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装nodejs和git</p>\n<p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure></li>\n<li><p>Hexo安装</p>\n<p>创建一个文件夹，cd进入文件夹，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<p>会创建以下目录：</p>\n<ul>\n<li>node_modules：是依赖包</li>\n<li>public：存放的是生成的页面</li>\n<li>scaffolds：命令生成文章等的模板</li>\n<li>source：用命令创建的各种文章</li>\n<li>themes：主题</li>\n<li>_config.yml：整个博客的配置</li>\n<li>db.json：source解析所得到的</li>\n<li>package.json：项目所需模块项目的配置信息</li>\n</ul>\n</li>\n<li><p>修改<code>_config.yml</code>文件，将hexo部署到github</p>\n<p>在文件末尾添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>安装deploy-git，既部署命令：<code>npm install hexo-deployer-git --save</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean  # 清除了你之前生成的东西</span><br><span class=\"line\">hexo generate # 生成静态文章，简写为hexo g</span><br><span class=\"line\">hexo deploy # 部署文章，简写为hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n<p>问题：<code>hexo d</code>时报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/wangyywyy/wangyywyy.github.io.git/&#x27;: Failed to connect to github.com port 443: Operation timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/didi/Documents/学习/个人项目/博客/lexie_blog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:394:28)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决：可能是网络拥堵导致的。换个时间执行hexo deploy就不报错了。</p>\n</li>\n<li><p>安装主题</p>\n<ul>\n<li><p>在theme文件夹下创建与主题同名的文件夹，并在theme目录下执行</p>\n<p><code>git clone \\&lt;url&gt; &lt;文件夹名&gt;</code></p>\n</li>\n<li><p>打开安装文件夹下_config.yml 文件，修改 theme 后面的名字为你刚才安装的主题，比如 next。</p>\n</li>\n<li><p>hexo clean清理缓存</p>\n</li>\n<li><p>部署hexo g</p>\n</li>\n<li><p>启动本地预览hexo s，访问<a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n</li>\n<li><p>hexo d 部署到github</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p><a href=\"https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\">使用hexo+github搭建免费个人博客详细教程</a></p>\n<p>直接在source/_posts目录下创建后缀为.md的文件；</p>\n<p>或者进入hexo根目录，执行<code>hexo new &quot;my-first-blog&quot;</code>，hexo会在_posts下生成相关md文件，打开文件就可以开始写博客了。自动生成的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: postName #文章页面上的显示名称，一般是中文</span><br><span class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class=\"line\">categories: 默认分类 #分类</span><br><span class=\"line\">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class=\"line\">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">这里是摘要</span><br><span class=\"line\">&lt;!--more--&gt;  </span><br><span class=\"line\">这里是正文</span><br><span class=\"line\"></span><br><span class=\"line\">注意：description 和 &lt;!-- more --&gt; 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</span><br></pre></td></tr></table></figure>\n\n<p>写好文章后，用一下命令推送到服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g  </span><br><span class=\"line\">hexo d</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"图床工具PicGo\"><a href=\"#图床工具PicGo\" class=\"headerlink\" title=\"图床工具PicGo\"></a>图床工具PicGo</h2><p>腾讯云地址：<a href=\"https://cloud.tencent.com/product/cos\">https://cloud.tencent.com/product/cos</a></p>\n<p>对象存储 创建存储桶</p>\n<p>访问管理 创建密钥</p>\n<p>用腾讯云上的存储桶和密钥<a href=\"https://blog.csdn.net/qq_40672635/article/details/105904918\">配置picgo</a></p>\n<p>typra自动上传图片到腾讯云：<a href=\"https://support.typora.io/Upload-Image/#picgoapp-chinese-language-only\">插入图片时自动上传</a></p>\n","text":"使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】创建github仓库创建github仓库仓库名称为&lt;guthub username&gt;.github.io生成SSH key，添加到github1<br>2<br>git config","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}