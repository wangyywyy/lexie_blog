{"total":3,"pageSize":10,"pageCount":1,"data":[{"title":"Log4j","slug":"Log4j","date":"2021-08-05T02:32:00.000Z","updated":"2021-08-05T02:32:44.579Z","comments":true,"path":"api/articles/Log4j.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Log4j\"><a href=\"#Log4j\" class=\"headerlink\" title=\"Log4j\"></a>Log4j</h1><p><strong>使用log4j 需要加载的jar包有</strong>：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log4j</span>.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Log4j三大组件\"><a href=\"#Log4j三大组件\" class=\"headerlink\" title=\"Log4j三大组件\"></a>Log4j三大组件</h2><p><a href=\"http://liuzhijun.iteye.com/blog/1746571\">快速了解Log4J</a></p>\n<p>一个logger可对应多个appender，一个appender只能对应一个layout。</p>\n<ul>\n<li><p><strong>Logger：日志记录器，负责收集处理日志记录   （如何处理日志）</strong></p>\n<ul>\n<li><p><strong>Root</strong> Logger：所有日志都会直接或者间接地继承自root。</p>\n<p>通过<code>Logger.getRootLogger()</code>方法获取根日志。</p>\n</li>\n<li><p>日志的创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger.getLogger(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// log4j</span></span><br><span class=\"line\">LogManager.getLogger(<span class=\"string\">&quot;name&quot;</span>);<span class=\"comment\">// log4j2</span></span><br></pre></td></tr></table></figure>\n\n<p>log的name就是XX类的全限定类名。Logger的命名有继承机制：name为com.yy的logger会继承name为com的logger。</p>\n</li>\n<li><p>Level</p>\n<p>日志级别（从高到低）：OFF（关闭）FATAL（致命的） ERROR（错误）WARN（警告） INFO（信息）DEBUG （调试） ALL（所有）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.info(message);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果logger的Level设置为INFO，那么系统只输出INFO以及以上（WARN、ERROR、FATAL）信息。</p>\n</li>\n<li><p>如果当前logger没有设定Level，那么它会使用它继承的Logger的Level作为它自己的Level来处理。不断往上上级寻找不为空的Level，直到root为止（root的Level不能设为空）<strong>。默认root的Level是INFO，其他logger的Level默认都是null，需要手动指定。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Appender：日志输出目的地，负责日志的输出（输出到什么 地方）</p>\n<p>通过<code>logger.addAppender(appender)</code>配置多个appender。</p>\n<p>每个有效的日志请求结果都将输出到logger本身以及父logger的appender上。可以通过<code>logger.setAdditivity(false);</code>让日志仅在logger本身输出。</p>\n<p>常用appender：</p>\n<ul>\n<li>org.apache.log4j.<strong>ConsoleAppender</strong>（控制台</li>\n<li>org.apache.log4j.FileAppender（文件）</li>\n<li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li>\n<li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li>\n<li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li>\n</ul>\n</li>\n<li><p>Layout：日志格式化，负责对输出的日志格式化（以什么形式展现）</p>\n<p>常见layout：</p>\n<ul>\n<li><p>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</p>\n</li>\n<li><p>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</p>\n</li>\n<li><p>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</p>\n</li>\n<li><p>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger com = Logger.getLogger(<span class=\"string\">&quot;com&quot;</span>);  </span><br><span class=\"line\">Appender appender = <span class=\"keyword\">new</span> FileAppender(<span class=\"keyword\">new</span> SimpleLayout(),<span class=\"string\">&quot;hello.log&quot;</span>);  </span><br><span class=\"line\">com.addAppender(appender);  </span><br><span class=\"line\">  </span><br><span class=\"line\">Logger iteye = Logger.getLogger(<span class=\"string\">&quot;com.iteye&quot;</span>);  </span><br><span class=\"line\">iteye.addAppender(<span class=\"keyword\">new</span> ConsoleAppender(<span class=\"keyword\">new</span> SimpleLayout(), <span class=\"string\">&quot;System.out&quot;</span>));  <span class=\"comment\">//target:sys.out(default) 或 sys.err  </span></span><br><span class=\"line\">iteye.info(<span class=\"string\">&quot;hello world&quot;</span>);  </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Log4j配置\"><a href=\"#Log4j配置\" class=\"headerlink\" title=\"Log4j配置\"></a>Log4j配置</h2><ol>\n<li><p>配置根Logger</p>\n<p>一般情况下，只需要配置根记录器rootLogger即可，<strong>所有的logger都会沿用rootLogger的配置。</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> =  <span class=\"string\">[ level ]  , appenderName1 , appenderName2 , … </span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置日志信息输出目的地（Appender）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName</span> = <span class=\"string\">fully.qualified.name.of.appender.class  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.option1</span> = <span class=\"string\">value1  </span></span><br><span class=\"line\"><span class=\"comment\"># …  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.optionN</span> = <span class=\"string\">valueN </span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置日志信息的格式（Layout）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout</span> = <span class=\"string\">fully.qualified.name.of.layout.class  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout.option1</span> = <span class=\"string\">value1  </span></span><br><span class=\"line\"><span class=\"comment\"># …  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.appenderName.layout.optionN</span> = <span class=\"string\">valueN  </span></span><br></pre></td></tr></table></figure>\n\n<p>其中<strong>ConversionPattern</strong>参数的格式含义</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">格式名</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%c</td>\n<td align=\"left\">输出日志信息所属的类的全名</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"left\">输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"left\">输出日志信息所属的类的类名</td>\n</tr>\n<tr>\n<td align=\"center\">%l</td>\n<td align=\"left\">输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行</td>\n</tr>\n<tr>\n<td align=\"center\">%m</td>\n<td align=\"left\">输出代码中指定的信息，如log(message)中的message</td>\n</tr>\n<tr>\n<td align=\"center\">%n</td>\n<td align=\"left\">输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"left\">输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推</td>\n</tr>\n<tr>\n<td align=\"center\">%r</td>\n<td align=\"left\">输出自应用启动到输出该日志信息所耗费的毫秒数</td>\n</tr>\n<tr>\n<td align=\"center\">%t</td>\n<td align=\"left\">输出产生该日志事件的线程名</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置根Logger </span></span><br><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span> = <span class=\"string\">DEBUG,stdout,file</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### 输出到控制台 ###  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout</span> = <span class=\"string\">org.apache.log4j.ConsoleAppender  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.Target</span> = <span class=\"string\">System.out   #默认就是System.out，另外一个值是System.error  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout</span> = <span class=\"string\">org.apache.log4j.PatternLayout  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout.ConversionPattern</span> =  <span class=\"string\">%d&#123;ABSOLUTE&#125; %5p %c&#123; 1 &#125;:%L - %m%n  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### 输出到文件 ###  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file</span> = <span class=\"string\">org.apache.log4j.DailyRollingFileAppender  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.File</span> = <span class=\"string\">logs/log.log  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.Append</span> = <span class=\"string\">true   #默认就是true，系统启动时追加至文件中，否则会覆盖原有内容  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.Threshold</span> = <span class=\"string\">INFO ## 输出IFNO级别以上的日志，这里的意思是rootLogger设置为DEBUG时，只输出INFO以上（INFO、WARN、ERROR、FATAL）的信息到文件中去，而DEBUG信息就不会输出了  </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置日志信息的格式（Layout）</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout</span> = <span class=\"string\">org.apache.log4j.PatternLayout  </span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout.ConversionPattern</span> = <span class=\"string\">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n  </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Log4j2\"><a href=\"#Log4j2\" class=\"headerlink\" title=\"Log4j2\"></a>Log4j2</h1><p><a href=\"https://blog.csdn.net/loophome/article/details/94033039\">Java Log4j和Log4j2的区别</a></p>\n<p><strong>使用log4j2 需要加载的jar包有</strong>：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log4j</span>-api-[version].jar</span><br><span class=\"line\"><span class=\"attribute\">log4j</span>-core-[version].jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Log4j2配置\"><a href=\"#Log4j2配置\" class=\"headerlink\" title=\"Log4j2配置\"></a>Log4j2配置</h2><p>没有log4j2的配置文件，将使用缺省配置：控制台log的级别为error，log自身的日志级别为trace。（log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的配置文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台。）</p>\n<p><a href=\"https://blog.csdn.net/vbirdbest/article/details/71751835#t8\">五：log4j2配置文件详解</a></p>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><p><a href=\"http://logging.apache.org/log4j/2.x/manual/plugins.html\">Plugin</a></p>\n<p><a href=\"https://github.com/OuZhencong/log4j2/wiki/Log4j-2%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6\">Log4j 2的插件机制</a></p>\n<p>Log4j 2的扩展机制：通过在初始化时调用PluginManager，然后PluginManager则会去扫描在配置文件中声明的那些packages，如果找到了相应的被注解为plugin的类，则会去加载这些plugin。</p>\n<p>配置方式如下：</p>\n<p>在Log4j 2初始化时，PluginManager去扫描 <strong>org.apache.logging.log4j.test</strong> 这个包，去加载那些注解为plugin的类。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">status</span>=<span class=\"string\">&quot;debug&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;XMLConfigTest&quot;</span> <span class=\"attr\">packages</span>=<span class=\"string\">&quot;org.apache.logging.log4j.test&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h3><p>核心插件是那些直接由配置文件中的元素表示的插件，例如：Appender、Logger以及Filter。</p>\n<ol>\n<li><p>首先，每一个Core plugin都必须在其类声明加上@Plugin注解，并且声明清楚其中的各个属性。</p>\n<p>用户在其配置中通过@Plugin上配置的name 属性来使用Appender。如果 Appender 的属性值是使用toString 方法传递的，Appender 应将 printObject 指定为“true”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Plugin</span> (name = <span class=\"string\">&quot;Async&quot;</span> , category = <span class=\"string\">&quot;Core&quot;</span>, elementType = <span class=\"string\">&quot;appender&quot;</span> , printObject = <span class=\"keyword\">true</span> )</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncAppender</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAppender</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li><p>每一个Core plugin的类，都必须声明一个static方法，并且被加上@PluginFactory注解。这个方法可以用来接收log4j.xml的传参数，可以自行添加接收，和log4j.xml 中传参数对应上就行（用于Log4j初始化的时候生成一个具体的plugin实例。）</p>\n<p>每个元素的注解都必须包含配置中存在的名称，以便将配置项与其各自的参数相匹配。为了允许配置将正确的参数传递给方法，方法的每个参数都必须注释为以下属性类型之一：</p>\n<ul>\n<li><strong>PluginAttribute</strong>：该参数必须可以使用<a href=\"http://logging.apache.org/log4j/2.x/manual/plugins.html#TypeConverters\">TypeConverter</a>从 String 转换。(这个字段在配置文件中可以通过字符串来创建的简单类型参数。)</li>\n<li><strong>PluginElement</strong>：参数可能代表一个复杂的对象，它本身具有可以配置的参数。这也支持注入元素数组。</li>\n<li>PluginConfiguration：当前这个配置的配置对象，作为一个参数传入这个plugin实例中。</li>\n<li>PluginNode</li>\n<li>PluginValue</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PluginFactory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailAppender <span class=\"title\">createAppender</span><span class=\"params\">(<span class=\"meta\">@PluginAttribute(&quot;name&quot;)</span>String name,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"meta\">@PluginElement(&quot;Filters&quot;)</span>Filter filter,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"meta\">@PluginElement(&quot;Layout&quot;)</span>Layout layout)</span></span>&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>也可以使用<code>@PluginBuilderFactory</code>注解，用于构造一个新的 Builder&lt;T&gt; 类，其字段用于注入属性和子节点。如果注解（<code>@PluginAttribute</code>、<code>@PluginElement</code>等）中未指定名称，则默认使用字段名称。</p>\n</li>\n</ol>\n<h4 id=\"Appenders\"><a href=\"#Appenders\" class=\"headerlink\" title=\"Appenders\"></a>Appenders</h4><p><a href=\"http://logging.apache.org/log4j/2.x/manual/extending.html#Plugin_Builders\">Appenders</a></p>\n<p>Appenders 被传递一个事件，调用一个Layout来格式化事件，然后以任何需要的方式“发布”事件。</p>\n","text":"Log4j使用log4j 需要加载的jar包有：1<br>log4j.jar<br>Log4j三大组件快速了解Log4J一个logger可对应多个appender，一个appender只能对应一个layout。Logger：日志记录器，负责收集处理日志记录   （如何处理日志）R","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"日志","slug":"日志","count":1,"path":"api/tags/日志.json"}]},{"title":"Hello World","slug":"hello-world","date":"2021-07-28T07:57:15.909Z","updated":"2021-07-28T07:57:15.909Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Github pages个人博客的搭建","slug":"Github pages个人博客的搭建","date":"2021-07-28T06:18:25.920Z","updated":"2021-07-30T03:59:16.372Z","comments":true,"path":"api/articles/Github pages个人博客的搭建.json","excerpt":"","keywords":null,"cover":null,"content":"<p><a href=\"https://blog.csdn.net/qq_36759224/article/details/82121420\">使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a></p>\n<h2 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h2><p><a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site\">创建github仓库</a></p>\n<ol>\n<li><p>仓库名称为&lt;guthub username&gt;.github.io</p>\n</li>\n<li><p>生成SSH key，添加到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;github username&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;github email&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在.ssh文件夹中，将id_rsa.pub这个公钥添加到github—setting—SSH keys中</p>\n<p>使用<code>ssh -T git@github.com</code>查看是否设置成功。</p>\n</li>\n</ol>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><a href=\"https://hexo.io/zh-cn/docs/\">安装Hexo</a></p>\n<ol>\n<li><p><a href=\"https://www.jianshu.com/p/e0471aa6672d?utm_campaign=hugo\">安装homebrew</a></p>\n<p>Homebrew是 mac的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，可以省掉自己去下载、解压、拖拽(安装)等繁琐的步骤。 </p>\n<ul>\n<li><p>brew镜像安装脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>为了提升使用homebrew安装软件的速度，需要更改 Homebrew 的安装源，将其替换成国内镜像。</p>\n<p>替换brew.git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>\n\n<p>替换 homebrew-core.git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>\n\n<p>替换homebrew-bottles：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装nodejs和git</p>\n<p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure></li>\n<li><p>Hexo安装</p>\n<p>创建一个文件夹，cd进入文件夹，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<p>会创建以下目录：</p>\n<ul>\n<li>node_modules：是依赖包</li>\n<li>public：存放的是生成的页面</li>\n<li>scaffolds：命令生成文章等的模板</li>\n<li>source：用命令创建的各种文章</li>\n<li>themes：主题</li>\n<li>_config.yml：整个博客的配置</li>\n<li>db.json：source解析所得到的</li>\n<li>package.json：项目所需模块项目的配置信息</li>\n</ul>\n</li>\n<li><p>修改<code>_config.yml</code>文件，将hexo部署到github</p>\n<p>在文件末尾添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>安装deploy-git，既部署命令：<code>npm install hexo-deployer-git --save</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean  # 清除了你之前生成的东西</span><br><span class=\"line\">hexo generate # 生成静态文章，简写为hexo g</span><br><span class=\"line\">hexo deploy # 部署文章，简写为hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n<p>问题：<code>hexo d</code>时报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/wangyywyy/wangyywyy.github.io.git/&#x27;: Failed to connect to github.com port 443: Operation timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/didi/Documents/学习/个人项目/博客/lexie_blog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (node:events:394:28)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决：可能是网络拥堵导致的。换个时间执行hexo deploy就不报错了。</p>\n</li>\n<li><p>安装主题</p>\n<ul>\n<li><p>在theme文件夹下创建与主题同名的文件夹，并在theme目录下执行</p>\n<p><code>git clone \\&lt;url&gt; &lt;文件夹名&gt;</code></p>\n</li>\n<li><p>打开安装文件夹下_config.yml 文件，修改 theme 后面的名字为你刚才安装的主题，比如 next。</p>\n</li>\n<li><p>hexo clean清理缓存</p>\n</li>\n<li><p>部署hexo g</p>\n</li>\n<li><p>启动本地预览hexo s，访问<a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n</li>\n<li><p>hexo d 部署到github</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p><a href=\"https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\">使用hexo+github搭建免费个人博客详细教程</a></p>\n<p>直接在source/_posts目录下创建后缀为.md的文件；</p>\n<p>或者进入hexo根目录，执行<code>hexo new &quot;my-first-blog&quot;</code>，hexo会在_posts下生成相关md文件，打开文件就可以开始写博客了。自动生成的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: postName #文章页面上的显示名称，一般是中文</span><br><span class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class=\"line\">categories: 默认分类 #分类</span><br><span class=\"line\">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class=\"line\">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">这里是摘要</span><br><span class=\"line\">&lt;!--more--&gt;  </span><br><span class=\"line\">这里是正文</span><br><span class=\"line\"></span><br><span class=\"line\">注意：description 和 &lt;!-- more --&gt; 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</span><br></pre></td></tr></table></figure>\n\n<p>写好文章后，用一下命令推送到服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g  </span><br><span class=\"line\">hexo d</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"图床工具PicGo\"><a href=\"#图床工具PicGo\" class=\"headerlink\" title=\"图床工具PicGo\"></a>图床工具PicGo</h2><p>腾讯云地址：<a href=\"https://cloud.tencent.com/product/cos\">https://cloud.tencent.com/product/cos</a></p>\n<p>对象存储 创建存储桶</p>\n<p>访问管理 创建密钥</p>\n<p>用腾讯云上的存储桶和密钥<a href=\"https://blog.csdn.net/qq_40672635/article/details/105904918\">配置picgo</a></p>\n<p>typra自动上传图片到腾讯云：<a href=\"https://support.typora.io/Upload-Image/#picgoapp-chinese-language-only\">插入图片时自动上传</a></p>\n","text":"使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】创建github仓库创建github仓库仓库名称为&lt;guthub username&gt;.github.io生成SSH key，添加到github1<br>2<br>git config","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}